
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ARROWOPT ASYNC AWAIT BOOL BREAK CHAR COLON COMA COMILLA CONST CONTINUE DAMPERSAND DIFERENTE DIVASIGN DIVIDE DOLAR DOSDOBLEPUNTOS DYN ELSE ENDCHAR ENUM ERR EXCLAM EXPECT FALSE FINAL FLOAT32 FLOAT64 FLOATTYPE FN FOR FORMAT FROM HASHMAP ID IDCHAR IDENTICO IDSTRING IF IGUAL IMPL IN INPUT INT128 INT16 INT32 INT64 INT8 INTERRO INTTYPE IO LCOR LET LINKEDLIST LLLAVE LOOP LPAREN MAINFN MATCH MAYORQUE MENORQUE MINUS MOVE MULTIASIGN MUT NEW NFLOATTYPE NINTTYPE OK OR PARSE PLUS POINT POINTERSIZE PORCENTAJE PRINTLN PRIV PUB PUSH RCOR READLINE REF RESTAASIGN RETURN RLLAVE RPAREN SELF SIZEOF STATIC STDIN STR STRING STRUCT SUMAASIGN SUPER TIMES TRUE TYPE TYPEOF UINT128 UINT16 UINT32 UINT64 UINT8 UNSAFE UNWRAPOR USE VEC WHERE WHILEcuerpo : metodo\n  | funcion\n  cuerpof : metodo\n  | metodo cuerpof\n  metodo : asignacion\n  | impresion\n  | loop\n  | ifblock\n  | elseifblock\n  | elseblock\n  | vectorpush\n  | entrada\n  | while\n  valor : valornumerico\n  | TRUE\n  | FALSE\n  | ID\n  | IDCHAR\n  | IDSTRING\n  | expresion\n  | conectores\n  | comparacion\n  \n  datatype : intsize\n  | uintsize\n  | floatsize\n  | strsize\n  | STRING\n  | BOOLcomparacion : ID signocompar ID\n  | IDCHAR signocompar IDCHAR\n  | IDSTRING signocompar IDSTRING\n    estructuras : linkedlist\n    | hashmap\n    \n  intsize : INT8\n  | INT16\n  | INT32\n  | INT64\n  | INT128comparacion : INTTYPE signocompar INTTYPE\n  | NINTTYPE signocompar NINTTYPE\n  | FLOATTYPE signocompar FLOATTYPE\n  asignacion : LET MUT ID IGUAL VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARwhile : WHILE ifparams LLLAVE cuerpof RLLAVEcomparacion : boolean signocompar boolean\n  floatsize : FLOAT32\n  | FLOAT64\n  asignacion : CONST ID COLON intsize IGUAL INTTYPE ENDCHAR\n  | CONST ID COLON intsize IGUAL NINTTYPE ENDCHAR\n  hashmap : HASHMAP DOSDOBLEPUNTOS NEW LPAREN RPAREN\n  uintsize : UINT8\n  | UINT16\n  | UINT32\n  | UINT64\n  | UINT128expresion :  valornumerico signo valornumerico\n  valornumerico : NINTTYPE\n  | INTTYPE\n  | FLOATTYPE\n  | NFLOATTYPE\n  asignacion : CONST ID COLON uintsize IGUAL INTTYPE ENDCHARsignocompar : MAYORQUE \n  | MENORQUE\n  | DIFERENTE\n  | IDENTICO\n  \n  strsize : AMPERSAND COMILLA STATIC STR\n  | AMPERSAND STR\n  \n  boolean : TRUE\n  | FALSE\n  asignacion : CONST ID COLON floatsize IGUAL FLOATTYPE ENDCHAR\n  signo : PLUS\n  | TIMES\n  | MINUS\n  | PORCENTAJE\n  | DIVIDE\n  linkedlist : LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARconectores : boolean signoconect boolean \n  | EXCLAM boolean\n  | ID signoconect IDasignacion : CONST ID COLON strsize IGUAL IDSTRING ENDCHAR\n  ifparams : ifcondicion\n  | boolean\n  | ID\n  signoconect : DAMPERSAND\n  | OR\n  \n  entrada : IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN ENDCHAR\n  | IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN POINT EXPECT LPAREN IDSTRING RPAREN ENDCHAR\n  asignacion : CONST ID COLON STRING IGUAL STRING DOSDOBLEPUNTOS FROM LPAREN IDSTRING RPAREN ENDCHAR\n  elseblock : ifblock ELSE LLLAVE cuerpof RLLAVE\n  | elseifblock ELSE LLLAVE cuerpof RLLAVE\n  asignacion : CONST ID COLON STRING IGUAL IDSTRING ENDCHARloop : LOOP LLLAVE metodo RLLAVEparams : ID COLON datatype \n  | ID COLON datatype COMA params\n  elseifblock : ifblock ELSE IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE\n  | ifblock ELSE IF ifparams LLLAVE cuerpof RLLAVE\n  asignacion : CONST ID COLON BOOL IGUAL boolean ENDCHARfuncion : FN ID LPAREN params RPAREN LLLAVE metodo RLLAVE\n  ifblock : IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE\n  | IF ifparams LLLAVE cuerpof RLLAVE\n  impresion : PRINTLN LPAREN IDSTRING RPAREN ENDCHARasignacion : CONST ID COLON CHAR IGUAL IDCHAR ENDCHAR\n  ifcondicion : comparacion\n  | comparacion signoconect ifcondicion\n  | LPAREN comparacion RPAREN\n  | LPAREN comparacion RPAREN signoconect ifcondicion\n  | LPAREN ifcondicion RPAREN\n  \n  vectorpush : ID POINT PUSH LPAREN INTTYPE RPAREN ENDCHAR\n  \n  funcion : FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof RETURN ifparams ENDCHAR  RLLAVE\n  \n  funcion : FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof ID RLLAVE\n  asignacion : LET MUT ID IGUAL valor ENDCHAR\n  | LET MUT ID IGUAL estructuras ENDCHARasignacion : LET ID IGUAL valor ENDCHAR'
    
_lr_action_items = {'FN':([0,],[13,]),'LET':([0,4,5,6,7,8,9,10,11,12,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[15,-5,-6,-7,-8,-9,-10,-11,-12,-13,15,15,15,15,15,15,-91,15,-88,-89,-112,-100,15,-99,-43,15,-110,-111,15,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,15,-94,-42,-87,-85,-86,]),'CONST':([0,4,5,6,7,8,9,10,11,12,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[16,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,16,16,16,16,16,-91,16,-88,-89,-112,-100,16,-99,-43,16,-110,-111,16,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,16,-94,-42,-87,-85,-86,]),'PRINTLN':([0,4,5,6,7,8,9,10,11,12,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[17,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,17,17,17,17,17,-91,17,-88,-89,-112,-100,17,-99,-43,17,-110,-111,17,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,17,-94,-42,-87,-85,-86,]),'LOOP':([0,4,5,6,7,8,9,10,11,12,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[18,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,18,18,18,18,18,-91,18,-88,-89,-112,-100,18,-99,-43,18,-110,-111,18,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,18,-94,-42,-87,-85,-86,]),'IF':([0,4,5,6,7,8,9,10,11,12,22,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[19,-5,-6,-7,-8,-9,-10,-11,-12,-13,47,19,19,19,19,19,19,-91,19,-88,-89,-112,-100,19,-99,-43,19,-110,-111,19,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,19,-94,-42,-87,-85,-86,]),'ID':([0,4,5,6,7,8,9,10,11,12,13,15,16,19,21,26,30,31,46,47,48,49,50,53,60,62,63,64,65,66,67,68,69,76,80,83,88,126,142,143,144,145,156,157,175,176,177,178,180,190,194,195,217,218,219,222,226,227,228,229,230,232,233,234,236,241,247,248,255,256,259,265,269,274,],[14,-5,-6,-7,-8,-9,-10,-11,-12,-13,24,27,28,35,35,52,14,35,78,35,14,14,85,89,14,-61,-62,-63,-64,132,78,-83,-84,14,35,14,89,-91,14,-88,-4,-89,198,-112,-100,14,78,-99,-43,14,-110,-111,14,-95,85,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,14,-94,254,35,-42,263,-87,-85,-86,]),'IO':([0,4,5,6,7,8,9,10,11,12,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[20,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,20,20,20,20,20,-91,20,-88,-89,-112,-100,20,-99,-43,20,-110,-111,20,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,20,-94,-42,-87,-85,-86,]),'WHILE':([0,4,5,6,7,8,9,10,11,12,30,48,49,60,76,83,126,142,143,145,157,175,176,178,180,190,194,195,217,218,222,226,227,228,229,230,232,233,234,236,241,247,256,265,269,274,],[21,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,21,21,21,21,21,-91,21,-88,-89,-112,-100,21,-99,-43,21,-110,-111,21,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,21,-94,-42,-87,-85,-86,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,126,143,145,157,175,178,180,194,195,218,222,226,227,228,229,230,232,233,234,236,240,247,256,260,265,267,269,274,],[0,-1,-2,-5,-6,-7,-8,-9,-10,-11,-12,-13,-91,-88,-89,-112,-100,-99,-43,-110,-111,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,-97,-94,-42,-109,-87,-108,-85,-86,]),'RLLAVE':([4,5,6,7,8,9,10,11,12,56,82,83,84,126,130,140,143,144,145,157,175,178,180,182,194,195,214,218,220,222,226,227,228,229,230,232,233,234,236,238,247,254,256,264,265,269,274,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,126,143,-3,145,-91,178,180,-88,-4,-89,-112,-100,-99,-43,218,-110,-111,236,-95,240,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,247,-94,260,-42,267,-87,-85,-86,]),'RETURN':([4,5,6,7,8,9,10,11,12,83,126,143,144,145,157,175,178,180,194,195,218,222,226,227,228,229,230,232,233,234,236,247,248,256,265,269,274,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-3,-91,-88,-4,-89,-112,-100,-99,-43,-110,-111,-95,-107,-47,-48,-60,-69,-79,-90,-96,-101,-98,-94,255,-42,-87,-85,-86,]),'ELSE':([7,8,178,218,236,247,],[22,23,-99,-95,-98,-94,]),'POINT':([14,179,266,],[25,216,268,]),'MUT':([15,253,],[26,259,]),'LPAREN':([17,19,21,24,31,46,47,51,67,68,69,75,80,177,223,224,225,237,245,255,270,],[29,31,46,50,46,46,80,87,46,-83,-84,139,46,46,242,243,244,246,252,46,271,]),'LLLAVE':([18,22,23,32,33,34,35,36,37,38,45,81,112,113,114,115,116,117,118,119,120,121,122,123,127,128,129,131,132,133,134,135,136,137,138,147,174,181,184,185,186,187,188,189,215,221,235,],[30,48,49,60,-80,-81,-82,-102,-67,-68,76,142,-34,-35,-36,-37,-38,-50,-51,-52,-53,-54,-45,-46,176,-104,-106,-44,-29,-103,-30,-31,-39,-40,-41,190,-66,217,-23,-24,-25,-26,-27,-28,-105,241,-65,]),'TRUE':([19,21,31,46,47,53,61,62,63,64,65,67,68,69,80,88,104,164,171,177,255,],[37,37,37,37,37,92,37,-61,-62,-63,-64,37,-83,-84,37,92,37,37,37,37,37,]),'FALSE':([19,21,31,46,47,53,61,62,63,64,65,67,68,69,80,88,104,164,171,177,255,],[38,38,38,38,38,93,38,-61,-62,-63,-64,38,-83,-84,38,93,38,38,38,38,38,]),'IDCHAR':([19,21,31,46,47,53,62,63,64,65,67,68,69,70,80,88,172,177,255,],[39,39,39,39,39,94,-61,-62,-63,-64,39,-83,-84,134,39,94,212,39,39,]),'IDSTRING':([19,21,29,31,46,47,53,62,63,64,65,67,68,69,71,80,88,169,170,177,252,255,271,],[40,40,55,40,40,40,95,-61,-62,-63,-64,40,-83,-84,135,40,95,208,210,40,258,40,272,]),'INTTYPE':([19,21,31,46,47,53,62,63,64,65,67,68,69,72,80,87,88,158,159,160,161,162,163,166,167,177,255,],[41,41,41,41,41,100,-61,-62,-63,-64,41,-83,-84,136,41,148,100,201,-70,-71,-72,-73,-74,204,206,41,41,]),'NINTTYPE':([19,21,31,46,47,53,62,63,64,65,67,68,69,73,80,88,158,159,160,161,162,163,166,177,255,],[42,42,42,42,42,99,-61,-62,-63,-64,42,-83,-84,137,42,99,200,-70,-71,-72,-73,-74,205,42,42,]),'FLOATTYPE':([19,21,31,46,47,53,62,63,64,65,67,68,69,74,80,88,158,159,160,161,162,163,168,177,255,],[43,43,43,43,43,101,-61,-62,-63,-64,43,-83,-84,138,43,101,202,-70,-71,-72,-73,-74,207,43,43,]),'DOSDOBLEPUNTOS':([20,149,154,155,209,],[44,193,196,197,231,]),'PUSH':([25,],[51,]),'IGUAL':([27,52,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,174,235,],[53,88,166,167,168,169,170,171,172,-34,-35,-36,-37,-38,-50,-51,-52,-53,-54,-45,-46,-66,-65,]),'COLON':([28,85,],[54,146,]),'ENDCHAR':([33,34,35,36,37,38,89,90,91,92,93,94,95,96,97,98,99,100,101,102,125,128,129,131,132,133,134,135,136,137,138,150,151,152,153,165,192,198,199,200,201,202,203,204,205,206,207,208,210,211,212,215,249,250,251,257,261,262,266,273,],[-80,-81,-82,-102,-67,-68,-17,157,-14,-15,-16,-18,-19,-20,-21,-22,-56,-57,-58,-59,175,-104,-106,-44,-29,-103,-30,-31,-39,-40,-41,194,195,-32,-33,-77,222,-78,-55,-56,-57,-58,-76,226,227,228,229,230,232,233,234,-105,256,257,-49,-75,264,265,269,274,]),'RPAREN':([34,35,36,37,38,55,57,58,59,77,86,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,134,135,136,137,138,139,141,148,174,183,184,185,186,187,188,189,215,235,239,242,243,244,258,263,272,],[-81,-82,-102,-67,-68,125,127,128,129,129,147,-34,-35,-36,-37,-38,-50,-51,-52,-53,-54,-45,-46,-104,-106,-44,-29,-103,-30,-31,-39,-40,-41,179,181,192,-66,-92,-23,-24,-25,-26,-27,-28,-105,-65,-93,249,250,251,262,266,273,]),'MAYORQUE':([34,35,37,38,39,40,41,42,43,78,79,89,92,93,94,95,99,100,101,103,],[62,62,-67,-68,62,62,62,62,62,62,62,62,-67,-68,62,62,62,62,62,62,]),'MENORQUE':([34,35,37,38,39,40,41,42,43,78,79,89,92,93,94,95,99,100,101,103,],[63,63,-67,-68,63,63,63,63,63,63,63,63,-67,-68,63,63,63,63,63,63,]),'DIFERENTE':([34,35,37,38,39,40,41,42,43,78,79,89,92,93,94,95,99,100,101,103,],[64,64,-67,-68,64,64,64,64,64,64,64,64,-67,-68,64,64,64,64,64,64,]),'IDENTICO':([34,35,37,38,39,40,41,42,43,78,79,89,92,93,94,95,99,100,101,103,],[65,65,-67,-68,65,65,65,65,65,65,65,65,-67,-68,65,65,65,65,65,65,]),'DAMPERSAND':([36,37,38,58,89,92,93,103,128,131,132,134,135,136,137,138,],[68,-67,-68,68,68,-67,-68,68,68,-44,-29,-30,-31,-39,-40,-41,]),'OR':([36,37,38,58,89,92,93,103,128,131,132,134,135,136,137,138,],[69,-67,-68,69,69,-67,-68,69,69,-44,-29,-30,-31,-39,-40,-41,]),'STDIN':([44,],[75,]),'NFLOATTYPE':([53,88,158,159,160,161,162,163,],[102,102,102,-70,-71,-72,-73,-74,]),'EXCLAM':([53,88,],[104,104,]),'STRING':([54,146,170,191,],[109,188,209,188,]),'BOOL':([54,146,191,],[110,189,189,]),'CHAR':([54,],[111,]),'INT8':([54,146,191,],[112,112,112,]),'INT16':([54,146,191,],[113,113,113,]),'INT32':([54,146,191,],[114,114,114,]),'INT64':([54,146,191,],[115,115,115,]),'INT128':([54,146,191,],[116,116,116,]),'UINT8':([54,146,191,],[117,117,117,]),'UINT16':([54,146,191,],[118,118,118,]),'UINT32':([54,146,191,],[119,119,119,]),'UINT64':([54,146,191,],[120,120,120,]),'UINT128':([54,146,191,],[121,121,121,]),'FLOAT32':([54,146,191,],[122,122,122,]),'FLOAT64':([54,146,191,],[123,123,123,]),'AMPERSAND':([54,146,191,246,],[124,124,124,253,]),'VEC':([88,],[149,]),'LINKEDLIST':([88,],[154,]),'HASHMAP':([88,],[155,]),'PLUS':([91,99,100,101,102,],[159,-56,-57,-58,-59,]),'TIMES':([91,99,100,101,102,],[160,-56,-57,-58,-59,]),'MINUS':([91,99,100,101,102,],[161,-56,-57,-58,-59,]),'PORCENTAJE':([91,99,100,101,102,],[162,-56,-57,-58,-59,]),'DIVIDE':([91,99,100,101,102,],[163,-56,-57,-58,-59,]),'COMA':([112,113,114,115,116,117,118,119,120,121,122,123,174,183,184,185,186,187,188,189,235,],[-34,-35,-36,-37,-38,-50,-51,-52,-53,-54,-45,-46,-66,219,-23,-24,-25,-26,-27,-28,-65,]),'COMILLA':([124,],[173,]),'STR':([124,213,],[174,235,]),'ARROWOPT':([147,],[191,]),'STATIC':([173,],[213,]),'NEW':([193,196,197,],[223,224,225,]),'READLINE':([216,],[237,]),'FROM':([231,],[245,]),'EXPECT':([268,],[270,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'metodo':([0,30,48,49,60,76,83,142,176,190,217,241,],[2,56,83,83,83,83,83,83,83,220,83,83,]),'funcion':([0,],[3,]),'asignacion':([0,30,48,49,60,76,83,142,176,190,217,241,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'impresion':([0,30,48,49,60,76,83,142,176,190,217,241,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'loop':([0,30,48,49,60,76,83,142,176,190,217,241,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'ifblock':([0,30,48,49,60,76,83,142,176,190,217,241,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'elseifblock':([0,30,48,49,60,76,83,142,176,190,217,241,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'elseblock':([0,30,48,49,60,76,83,142,176,190,217,241,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'vectorpush':([0,30,48,49,60,76,83,142,176,190,217,241,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'entrada':([0,30,48,49,60,76,83,142,176,190,217,241,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'while':([0,30,48,49,60,76,83,142,176,190,217,241,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'ifparams':([19,21,31,47,80,255,],[32,45,57,81,141,261,]),'ifcondicion':([19,21,31,46,47,67,80,177,255,],[33,33,59,77,33,133,59,215,33,]),'boolean':([19,21,31,46,47,53,61,67,80,88,104,164,171,177,255,],[34,34,34,79,34,103,131,79,34,103,165,203,211,79,34,]),'comparacion':([19,21,31,46,47,53,67,80,88,177,255,],[36,36,58,58,36,98,36,58,98,36,36,]),'signocompar':([34,35,39,40,41,42,43,78,79,89,94,95,99,100,101,103,],[61,66,70,71,72,73,74,66,61,66,70,71,73,72,74,61,]),'signoconect':([36,58,89,103,128,],[67,67,156,164,177,]),'cuerpof':([48,49,60,76,83,142,176,217,241,],[82,84,130,140,144,182,214,238,248,]),'params':([50,219,],[86,239,]),'valor':([53,88,],[90,150,]),'valornumerico':([53,88,158,],[91,91,199,]),'expresion':([53,88,],[96,96,]),'conectores':([53,88,],[97,97,]),'intsize':([54,146,191,],[105,184,184,]),'uintsize':([54,146,191,],[106,185,185,]),'floatsize':([54,146,191,],[107,186,186,]),'strsize':([54,146,191,],[108,187,187,]),'estructuras':([88,],[151,]),'linkedlist':([88,],[152,]),'hashmap':([88,],[153,]),'signo':([91,],[158,]),'datatype':([146,191,],[183,221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> metodo','cuerpo',1,'p_cuerpo','sintaxisAB.py',3),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintaxisAB.py',4),
  ('cuerpof -> metodo','cuerpof',1,'p_cuerpof','sintaxisJJ.py',6),
  ('cuerpof -> metodo cuerpof','cuerpof',2,'p_cuerpof','sintaxisJJ.py',7),
  ('metodo -> asignacion','metodo',1,'p_metodo','sintaxisAB.py',7),
  ('metodo -> impresion','metodo',1,'p_metodo','sintaxisAB.py',8),
  ('metodo -> loop','metodo',1,'p_metodo','sintaxisAB.py',9),
  ('metodo -> ifblock','metodo',1,'p_metodo','sintaxisAB.py',10),
  ('metodo -> elseifblock','metodo',1,'p_metodo','sintaxisAB.py',11),
  ('metodo -> elseblock','metodo',1,'p_metodo','sintaxisAB.py',12),
  ('metodo -> vectorpush','metodo',1,'p_metodo','sintaxisAB.py',13),
  ('metodo -> entrada','metodo',1,'p_metodo','sintaxisAB.py',14),
  ('metodo -> while','metodo',1,'p_metodo','sintaxisAB.py',15),
  ('valor -> valornumerico','valor',1,'p_valor','sintaxisPR.py',7),
  ('valor -> TRUE','valor',1,'p_valor','sintaxisPR.py',8),
  ('valor -> FALSE','valor',1,'p_valor','sintaxisPR.py',9),
  ('valor -> ID','valor',1,'p_valor','sintaxisPR.py',10),
  ('valor -> IDCHAR','valor',1,'p_valor','sintaxisPR.py',11),
  ('valor -> IDSTRING','valor',1,'p_valor','sintaxisPR.py',12),
  ('valor -> expresion','valor',1,'p_valor','sintaxisPR.py',13),
  ('valor -> conectores','valor',1,'p_valor','sintaxisPR.py',14),
  ('valor -> comparacion','valor',1,'p_valor','sintaxisPR.py',15),
  ('datatype -> intsize','datatype',1,'p_datatype','sintaxisJJ.py',13),
  ('datatype -> uintsize','datatype',1,'p_datatype','sintaxisJJ.py',14),
  ('datatype -> floatsize','datatype',1,'p_datatype','sintaxisJJ.py',15),
  ('datatype -> strsize','datatype',1,'p_datatype','sintaxisJJ.py',16),
  ('datatype -> STRING','datatype',1,'p_datatype','sintaxisJJ.py',17),
  ('datatype -> BOOL','datatype',1,'p_datatype','sintaxisJJ.py',18),
  ('comparacion -> ID signocompar ID','comparacion',3,'p_comparacion_id','sintaxisAB.py',19),
  ('comparacion -> IDCHAR signocompar IDCHAR','comparacion',3,'p_comparacion_id','sintaxisAB.py',20),
  ('comparacion -> IDSTRING signocompar IDSTRING','comparacion',3,'p_comparacion_id','sintaxisAB.py',21),
  ('estructuras -> linkedlist','estructuras',1,'p_estructuras','sintaxisPR.py',21),
  ('estructuras -> hashmap','estructuras',1,'p_estructuras','sintaxisPR.py',22),
  ('intsize -> INT8','intsize',1,'p_intsize','sintaxisJJ.py',22),
  ('intsize -> INT16','intsize',1,'p_intsize','sintaxisJJ.py',23),
  ('intsize -> INT32','intsize',1,'p_intsize','sintaxisJJ.py',24),
  ('intsize -> INT64','intsize',1,'p_intsize','sintaxisJJ.py',25),
  ('intsize -> INT128','intsize',1,'p_intsize','sintaxisJJ.py',26),
  ('comparacion -> INTTYPE signocompar INTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',24),
  ('comparacion -> NINTTYPE signocompar NINTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',25),
  ('comparacion -> FLOATTYPE signocompar FLOATTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',26),
  ('asignacion -> LET MUT ID IGUAL VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','asignacion',10,'p_asignacion_let_mut_vec','main.py',26),
  ('while -> WHILE ifparams LLLAVE cuerpof RLLAVE','while',5,'p_while','sintaxisPR.py',27),
  ('comparacion -> boolean signocompar boolean','comparacion',3,'p_comparacion_bool','sintaxisAB.py',29),
  ('floatsize -> FLOAT32','floatsize',1,'p_floatsize','sintaxisJJ.py',30),
  ('floatsize -> FLOAT64','floatsize',1,'p_floatsize','sintaxisJJ.py',31),
  ('asignacion -> CONST ID COLON intsize IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_int','main.py',33),
  ('asignacion -> CONST ID COLON intsize IGUAL NINTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_int','main.py',34),
  ('hashmap -> HASHMAP DOSDOBLEPUNTOS NEW LPAREN RPAREN','hashmap',5,'p_hashmap','sintaxisPR.py',32),
  ('uintsize -> UINT8','uintsize',1,'p_uintsize','sintaxisJJ.py',35),
  ('uintsize -> UINT16','uintsize',1,'p_uintsize','sintaxisJJ.py',36),
  ('uintsize -> UINT32','uintsize',1,'p_uintsize','sintaxisJJ.py',37),
  ('uintsize -> UINT64','uintsize',1,'p_uintsize','sintaxisJJ.py',38),
  ('uintsize -> UINT128','uintsize',1,'p_uintsize','sintaxisJJ.py',39),
  ('expresion -> valornumerico signo valornumerico','expresion',3,'p_expresion','sintaxisPR.py',36),
  ('valornumerico -> NINTTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',41),
  ('valornumerico -> INTTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',42),
  ('valornumerico -> FLOATTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',43),
  ('valornumerico -> NFLOATTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',44),
  ('asignacion -> CONST ID COLON uintsize IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_uint','main.py',42),
  ('signocompar -> MAYORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',42),
  ('signocompar -> MENORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',43),
  ('signocompar -> DIFERENTE','signocompar',1,'p_signocompar','sintaxisAB.py',44),
  ('signocompar -> IDENTICO','signocompar',1,'p_signocompar','sintaxisAB.py',45),
  ('strsize -> AMPERSAND COMILLA STATIC STR','strsize',4,'p_strsize','sintaxisJJ.py',43),
  ('strsize -> AMPERSAND STR','strsize',2,'p_strsize','sintaxisJJ.py',44),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintaxisJJ.py',48),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintaxisJJ.py',49),
  ('asignacion -> CONST ID COLON floatsize IGUAL FLOATTYPE ENDCHAR','asignacion',7,'p_asignacion_const_float','main.py',48),
  ('signo -> PLUS','signo',1,'p_signo','sintaxisPR.py',49),
  ('signo -> TIMES','signo',1,'p_signo','sintaxisPR.py',50),
  ('signo -> MINUS','signo',1,'p_signo','sintaxisPR.py',51),
  ('signo -> PORCENTAJE','signo',1,'p_signo','sintaxisPR.py',52),
  ('signo -> DIVIDE','signo',1,'p_signo','sintaxisPR.py',53),
  ('linkedlist -> LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','linkedlist',6,'p_linkedlist','sintaxisAB.py',49),
  ('conectores -> boolean signoconect boolean','conectores',3,'p_conectores','sintaxisAB.py',52),
  ('conectores -> EXCLAM boolean','conectores',2,'p_conectores','sintaxisAB.py',53),
  ('conectores -> ID signoconect ID','conectores',3,'p_conectores','sintaxisAB.py',54),
  ('asignacion -> CONST ID COLON strsize IGUAL IDSTRING ENDCHAR','asignacion',7,'p_asignacion_const_str','main.py',53),
  ('ifparams -> ifcondicion','ifparams',1,'p_ifparams','sintaxisJJ.py',57),
  ('ifparams -> boolean','ifparams',1,'p_ifparams','sintaxisJJ.py',58),
  ('ifparams -> ID','ifparams',1,'p_ifparams','sintaxisJJ.py',59),
  ('signoconect -> DAMPERSAND','signoconect',1,'p_signoconect','sintaxisAB.py',57),
  ('signoconect -> OR','signoconect',1,'p_signoconect','sintaxisAB.py',58),
  ('entrada -> IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN ENDCHAR','entrada',13,'p_entrada','sintaxisPR.py',58),
  ('entrada -> IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN POINT EXPECT LPAREN IDSTRING RPAREN ENDCHAR','entrada',18,'p_entrada','sintaxisPR.py',59),
  ('asignacion -> CONST ID COLON STRING IGUAL STRING DOSDOBLEPUNTOS FROM LPAREN IDSTRING RPAREN ENDCHAR','asignacion',12,'p_asignacion_const_string','main.py',59),
  ('elseblock -> ifblock ELSE LLLAVE cuerpof RLLAVE','elseblock',5,'p_elseblock','sintaxisJJ.py',64),
  ('elseblock -> elseifblock ELSE LLLAVE cuerpof RLLAVE','elseblock',5,'p_elseblock','sintaxisJJ.py',65),
  ('asignacion -> CONST ID COLON STRING IGUAL IDSTRING ENDCHAR','asignacion',7,'p_asignacion_const_string2','main.py',65),
  ('loop -> LOOP LLLAVE metodo RLLAVE','loop',4,'p_loop','sintaxisAB.py',66),
  ('params -> ID COLON datatype','params',3,'p_params','sintaxisAB.py',69),
  ('params -> ID COLON datatype COMA params','params',5,'p_params','sintaxisAB.py',70),
  ('elseifblock -> ifblock ELSE IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE','elseifblock',9,'p_elseifblock','sintaxisJJ.py',70),
  ('elseifblock -> ifblock ELSE IF ifparams LLLAVE cuerpof RLLAVE','elseifblock',7,'p_elseifblock','sintaxisJJ.py',71),
  ('asignacion -> CONST ID COLON BOOL IGUAL boolean ENDCHAR','asignacion',7,'p_asignacion_const_bool','main.py',71),
  ('funcion -> FN ID LPAREN params RPAREN LLLAVE metodo RLLAVE','funcion',8,'p_funcion_sinreturn','sintaxisAB.py',73),
  ('ifblock -> IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE','ifblock',7,'p_ifblock','sintaxisJJ.py',76),
  ('ifblock -> IF ifparams LLLAVE cuerpof RLLAVE','ifblock',5,'p_ifblock','sintaxisJJ.py',77),
  ('impresion -> PRINTLN LPAREN IDSTRING RPAREN ENDCHAR','impresion',5,'p_impresion','sintaxisAB.py',76),
  ('asignacion -> CONST ID COLON CHAR IGUAL IDCHAR ENDCHAR','asignacion',7,'p_asignacion_const_char','main.py',77),
  ('ifcondicion -> comparacion','ifcondicion',1,'p_ifcondicion','sintaxisJJ.py',82),
  ('ifcondicion -> comparacion signoconect ifcondicion','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',83),
  ('ifcondicion -> LPAREN comparacion RPAREN','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',84),
  ('ifcondicion -> LPAREN comparacion RPAREN signoconect ifcondicion','ifcondicion',5,'p_ifcondicion','sintaxisJJ.py',85),
  ('ifcondicion -> LPAREN ifcondicion RPAREN','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',86),
  ('vectorpush -> ID POINT PUSH LPAREN INTTYPE RPAREN ENDCHAR','vectorpush',7,'p_vectorpush','main.py',84),
  ('funcion -> FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof RETURN ifparams ENDCHAR RLLAVE','funcion',13,'p_funcion_retorno','sintaxisJJ.py',96),
  ('funcion -> FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof ID RLLAVE','funcion',11,'p_funcion_returnimplicito','sintaxisJJ.py',101),
  ('asignacion -> LET MUT ID IGUAL valor ENDCHAR','asignacion',6,'p_asignacion_let_mut','main.py',106),
  ('asignacion -> LET MUT ID IGUAL estructuras ENDCHAR','asignacion',6,'p_asignacion_let_mut','main.py',107),
  ('asignacion -> LET ID IGUAL valor ENDCHAR','asignacion',5,'p_asignacion_let','main.py',115),
]
