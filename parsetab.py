
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ARROWOPT ASYNC AWAIT BOOL BREAK CHAR COLON COMA COMILLA CONST CONTINUE DAMPERSAND DIFERENTE DIVASIGN DIVIDE DOLAR DOSDOBLEPUNTOS DYN ELSE ENDCHAR ENUM ERR EXCLAM EXPECT FALSE FINAL FLOAT32 FLOAT64 FLOATTYPE FN FOR FORMAT FROM HASHMAP ID IDCHAR IDENTICO IDSTRING IF IGUAL IMPL IN INPUT INT128 INT16 INT32 INT64 INT8 INTERRO INTTYPE IO LCOR LET LINKEDLIST LLLAVE LOOP LPAREN MAINFN MATCH MAYORQUE MENORQUE MINUS MOVE MULTIASIGN MUT NEW NFLOATTYPE NINTTYPE OK OR PARSE PLUS POINT POINTERSIZE POP_BACK PORCENTAJE PRINTLN PRIV PUB PUSH PUSH_FRONT RCOR READLINE REF RESTAASIGN RETURN RLLAVE RPAREN SELF SIZEOF STATIC STDIN STR STRING STRUCT SUMAASIGN SUPER TIMES TRUE TYPE TYPEOF UINT128 UINT16 UINT32 UINT64 UINT8 UNSAFE UNWRAPOR USE VEC WHERE WHILEcuerpo : metodo\n  | funcion\n  cuerpof : metodo\n  | metodo cuerpof\n  metodo : asignacion\n  | impresion\n  | loop\n  | ifblock\n  | elseifblock\n  | elseblock\n  | vectorpush\n  | llpushfront\n  | llpopback\n  | sumaint\n  | entrada\n  | while\n  valor : valornumerico\n  | TRUE\n  | FALSE\n  | ID\n  | IDCHAR\n  | IDSTRING\n  | expresion\n  | conectores\n  | comparacion\n  \n    estructuras : linkedlist\n    | hashmap\n    comparacion : ID signocompar ID\n  | IDCHAR signocompar IDCHAR\n  | IDSTRING signocompar IDSTRINGasignacion : LET MUT ID IGUAL VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARcomparacion : INTTYPE signocompar INTTYPE\n  | NINTTYPE signocompar NINTTYPE\n  | FLOATTYPE signocompar FLOATTYPE\n  while : WHILE ifparams LLLAVE cuerpof RLLAVE\n  asignacion : CONST ID COLON intsize IGUAL INTTYPE ENDCHAR\n  | CONST ID COLON intsize IGUAL NINTTYPE ENDCHAR\n  comparacion : boolean signocompar booleanhashmap : HASHMAP DOSDOBLEPUNTOS NEW LPAREN RPARENexpresion :  valornumerico signo valornumerico\n  valornumerico : NINTTYPE\n  | INTTYPE\n  | FLOATTYPE\n  | NFLOATTYPE\n  \n  datatype : intsize\n  | uintsize\n  | floatsize\n  | strsize\n  | STRING\n  | BOOLasignacion : CONST ID COLON uintsize IGUAL INTTYPE ENDCHARsignocompar : MAYORQUE \n  | MENORQUE\n  | DIFERENTE\n  | IDENTICO\n  asignacion : CONST ID COLON floatsize IGUAL FLOATTYPE ENDCHAR\n  signo : PLUS\n  | TIMES\n  | MINUS\n  | PORCENTAJE\n  | DIVIDE\n  \n  intsize : INT8\n  | INT16\n  | INT32\n  | INT64\n  | INT128linkedlist : LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARasignacion : CONST ID COLON strsize IGUAL IDSTRING ENDCHARconectores : boolean signoconect boolean \n  | EXCLAM boolean\n  | ID signoconect ID\n  entrada : IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN ENDCHAR\n  | IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN POINT EXPECT LPAREN IDSTRING RPAREN ENDCHAR\n  \n  floatsize : FLOAT32\n  | FLOAT64asignacion : CONST ID COLON STRING IGUAL STRING DOSDOBLEPUNTOS FROM LPAREN IDSTRING RPAREN ENDCHARsignoconect : DAMPERSAND\n  | OR\n  \n  uintsize : UINT8\n  | UINT16\n  | UINT32\n  | UINT64\n  | UINT128asignacion : CONST ID COLON STRING IGUAL IDSTRING ENDCHARloop : LOOP LLLAVE metodo RLLAVEasignacion : CONST ID COLON BOOL IGUAL boolean ENDCHAR\n  strsize : AMPERSAND COMILLA STATIC STR\n  | AMPERSAND STR\n  params : ID COLON datatype \n  | ID COLON datatype COMA paramsfuncion : FN ID LPAREN params RPAREN LLLAVE metodo RLLAVE\n  boolean : TRUE\n  | FALSE\n  asignacion : CONST ID COLON CHAR IGUAL IDCHAR ENDCHARimpresion : PRINTLN LPAREN IDSTRING RPAREN ENDCHAR\n  vectorpush : ID POINT PUSH LPAREN INTTYPE RPAREN ENDCHAR\n  \n  ifparams : ifcondicion\n  | boolean\n  | ID\n  \n  elseblock : ifblock ELSE LLLAVE cuerpof RLLAVE\n  | elseifblock ELSE LLLAVE cuerpof RLLAVE\n  \n  elseifblock : ifblock ELSE IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE\n  | ifblock ELSE IF ifparams LLLAVE cuerpof RLLAVE\n  \n  ifblock : IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE\n  | IF ifparams LLLAVE cuerpof RLLAVE\n  asignacion : LET MUT ID IGUAL valor ENDCHAR\n  | LET MUT ID IGUAL estructuras ENDCHAR\n  ifcondicion : comparacion\n  | comparacion signoconect ifcondicion\n  | LPAREN comparacion RPAREN\n  | LPAREN comparacion RPAREN signoconect ifcondicion\n  | LPAREN ifcondicion RPAREN\n  asignacion : LET ID IGUAL valor ENDCHARasignacion : LET MUT ID IGUAL LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR\n  funcion : FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof RETURN ifparams ENDCHAR  RLLAVE\n  \n  llpushfront : ID POINT PUSH_FRONT LPAREN INTTYPE RPAREN ENDCHAR\n  \n  funcion : FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof ID RLLAVE\n  \n  llpopback : ID POINT POP_BACK LPAREN RPAREN ENDCHAR\n  \n  asignacion : CONST ID COLON INT8 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON INT16 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON INT32 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON INT64 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON INT128 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON UINT8 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON UINT16 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON UINT32 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON UINT64 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON UINT128 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON FLOAT32 IGUAL INTTYPE ENDCHAR\n  \n  asignacion : CONST ID COLON FLOAT64 IGUAL INTTYPE ENDCHAR\n  sumaint : ID PLUS ID'
    
_lr_action_items = {'FN':([0,],[16,]),'LET':([0,4,5,6,7,8,9,10,11,12,13,14,15,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[18,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,18,18,18,-131,18,18,18,-85,18,-100,-101,-113,-95,18,-105,-35,18,-118,-106,-107,18,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,18,-102,-31,-114,-76,-72,-73,]),'CONST':([0,4,5,6,7,8,9,10,11,12,13,14,15,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[19,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,19,19,19,-131,19,19,19,-85,19,-100,-101,-113,-95,19,-105,-35,19,-118,-106,-107,19,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,19,-102,-31,-114,-76,-72,-73,]),'PRINTLN':([0,4,5,6,7,8,9,10,11,12,13,14,15,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,20,20,20,-131,20,20,20,-85,20,-100,-101,-113,-95,20,-105,-35,20,-118,-106,-107,20,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,20,-102,-31,-114,-76,-72,-73,]),'LOOP':([0,4,5,6,7,8,9,10,11,12,13,14,15,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,21,21,21,-131,21,21,21,-85,21,-100,-101,-113,-95,21,-105,-35,21,-118,-106,-107,21,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,21,-102,-31,-114,-76,-72,-73,]),'IF':([0,4,5,6,7,8,9,10,11,12,13,14,15,25,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,51,22,22,22,-131,22,22,22,-85,22,-100,-101,-113,-95,22,-105,-35,22,-118,-106,-107,22,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,22,-102,-31,-114,-76,-72,-73,]),'ID':([0,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,22,24,29,30,34,35,50,51,52,53,54,58,60,67,69,70,71,72,73,74,75,76,83,87,90,97,135,151,152,153,154,167,168,198,199,200,201,203,225,229,231,232,266,267,268,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,310,317,318,319,321,327,331,336,],[17,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,27,31,32,39,39,58,59,17,39,85,39,17,17,92,-131,98,17,-52,-53,-54,-55,141,85,-77,-78,17,39,17,98,-85,17,-100,-4,-101,235,-113,-95,17,85,-105,-35,17,-118,-106,-107,17,-103,92,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,17,-102,316,39,-31,-114,325,-76,-72,-73,]),'IO':([0,4,5,6,7,8,9,10,11,12,13,14,15,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[23,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,23,23,23,-131,23,23,23,-85,23,-100,-101,-113,-95,23,-105,-35,23,-118,-106,-107,23,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,23,-102,-31,-114,-76,-72,-73,]),'WHILE':([0,4,5,6,7,8,9,10,11,12,13,14,15,34,52,53,58,67,83,90,135,151,152,154,168,198,199,201,203,225,229,231,232,266,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,303,309,318,319,327,331,336,],[24,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,24,24,24,-131,24,24,24,-85,24,-100,-101,-113,-95,24,-105,-35,24,-118,-106,-107,24,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,24,-102,-31,-114,-76,-72,-73,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,58,135,152,154,168,198,201,203,229,231,232,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,302,309,318,319,322,327,329,331,336,],[0,-1,-2,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-131,-85,-100,-101,-113,-95,-105,-35,-118,-106,-107,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,-91,-102,-31,-114,-117,-76,-115,-72,-73,]),'RLLAVE':([4,5,6,7,8,9,10,11,12,13,14,15,58,63,89,90,91,135,139,149,152,153,154,168,198,201,203,205,229,231,232,263,267,269,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,300,309,316,318,319,326,327,331,336,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-131,135,152,-3,154,-85,201,203,-100,-4,-101,-113,-95,-105,-35,267,-118,-106,-107,298,-103,302,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,309,-102,322,-31,-114,329,-76,-72,-73,]),'RETURN':([4,5,6,7,8,9,10,11,12,13,14,15,58,90,135,152,153,154,168,198,201,203,229,231,232,267,271,272,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,298,309,310,318,319,327,331,336,],[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-131,-3,-85,-100,-4,-101,-113,-95,-105,-35,-118,-106,-107,-103,-96,-116,-36,-37,-51,-56,-68,-84,-86,-94,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-104,-102,317,-31,-114,-76,-72,-73,]),'ELSE':([7,8,201,267,298,309,],[25,26,-105,-103,-104,-102,]),'POINT':([17,202,328,],[28,265,330,]),'PLUS':([17,100,108,109,110,111,],[29,170,-41,-42,-43,-44,]),'MUT':([18,315,],[30,321,]),'LPAREN':([20,22,24,27,35,50,51,55,56,57,74,75,76,82,87,200,273,274,275,299,307,317,332,],[33,35,50,54,50,50,87,94,95,96,50,-77,-78,148,50,50,304,305,306,308,314,50,333,]),'LLLAVE':([21,25,26,36,37,38,39,40,41,42,49,88,136,137,138,140,141,142,143,144,145,146,147,156,197,204,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,264,270,297,],[34,52,53,67,-97,-98,-99,-108,-92,-93,83,151,199,-110,-112,-38,-28,-109,-29,-30,-32,-33,-34,225,-88,266,-45,-46,-47,-48,-49,-50,-62,-63,-64,-65,-66,-79,-80,-81,-82,-83,-74,-75,-111,303,-87,]),'TRUE':([22,24,35,50,51,60,68,69,70,71,72,74,75,76,87,97,113,175,182,200,317,],[41,41,41,41,41,101,41,-52,-53,-54,-55,41,-77,-78,41,101,41,41,41,41,41,]),'FALSE':([22,24,35,50,51,60,68,69,70,71,72,74,75,76,87,97,113,175,182,200,317,],[42,42,42,42,42,102,42,-52,-53,-54,-55,42,-77,-78,42,102,42,42,42,42,42,]),'IDCHAR':([22,24,35,50,51,60,69,70,71,72,74,75,76,77,87,97,183,200,317,],[43,43,43,43,43,103,-52,-53,-54,-55,43,-77,-78,143,43,103,249,43,43,]),'IDSTRING':([22,24,33,35,50,51,60,69,70,71,72,74,75,76,78,87,97,180,181,200,314,317,333,],[44,44,62,44,44,44,104,-52,-53,-54,-55,44,-77,-78,144,44,104,245,247,44,320,44,334,]),'INTTYPE':([22,24,35,50,51,60,69,70,71,72,74,75,76,79,87,94,95,97,169,170,171,172,173,174,177,178,184,185,186,187,188,189,190,191,192,193,194,195,200,317,],[45,45,45,45,45,109,-52,-53,-54,-55,45,-77,-78,145,45,157,158,109,238,-57,-58,-59,-60,-61,241,243,250,251,252,253,254,255,256,257,258,259,260,261,45,45,]),'NINTTYPE':([22,24,35,50,51,60,69,70,71,72,74,75,76,80,87,97,169,170,171,172,173,174,177,200,317,],[46,46,46,46,46,108,-52,-53,-54,-55,46,-77,-78,146,46,108,237,-57,-58,-59,-60,-61,242,46,46,]),'FLOATTYPE':([22,24,35,50,51,60,69,70,71,72,74,75,76,81,87,97,169,170,171,172,173,174,179,200,317,],[47,47,47,47,47,110,-52,-53,-54,-55,47,-77,-78,147,47,110,239,-57,-58,-59,-60,-61,244,47,47,]),'DOSDOBLEPUNTOS':([23,160,163,166,246,],[48,230,233,234,281,]),'PUSH':([28,],[55,]),'PUSH_FRONT':([28,],[56,]),'POP_BACK':([28,],[57,]),'IGUAL':([31,59,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,197,297,],[60,97,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,-88,-87,]),'COLON':([32,92,],[61,155,]),'ENDCHAR':([37,38,39,40,41,42,98,99,100,101,102,103,104,105,106,107,108,109,110,111,134,137,138,140,141,142,143,144,145,146,147,159,161,162,164,165,176,227,228,235,236,237,238,239,240,241,242,243,244,245,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,264,311,312,313,319,323,324,328,335,],[-97,-98,-99,-108,-92,-93,-20,168,-17,-18,-19,-21,-22,-23,-24,-25,-41,-42,-43,-44,198,-110,-112,-38,-28,-109,-29,-30,-32,-33,-34,229,231,232,-26,-27,-70,271,272,-71,-40,-41,-42,-43,-69,276,277,278,279,280,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,-111,318,319,-39,-67,326,327,331,336,]),'RPAREN':([38,39,40,41,42,62,64,65,66,84,93,96,137,138,140,141,142,143,144,145,146,147,148,150,157,158,197,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,264,297,301,304,305,306,320,325,334,],[-98,-99,-108,-92,-93,134,136,137,138,138,156,159,-110,-112,-38,-28,-109,-29,-30,-32,-33,-34,202,204,227,228,-88,-89,-45,-46,-47,-48,-49,-50,-62,-63,-64,-65,-66,-79,-80,-81,-82,-83,-74,-75,-111,-87,-90,311,312,313,324,328,335,]),'MAYORQUE':([38,39,41,42,43,44,45,46,47,85,86,98,101,102,103,104,108,109,110,112,],[69,69,-92,-93,69,69,69,69,69,69,69,69,-92,-93,69,69,69,69,69,69,]),'MENORQUE':([38,39,41,42,43,44,45,46,47,85,86,98,101,102,103,104,108,109,110,112,],[70,70,-92,-93,70,70,70,70,70,70,70,70,-92,-93,70,70,70,70,70,70,]),'DIFERENTE':([38,39,41,42,43,44,45,46,47,85,86,98,101,102,103,104,108,109,110,112,],[71,71,-92,-93,71,71,71,71,71,71,71,71,-92,-93,71,71,71,71,71,71,]),'IDENTICO':([38,39,41,42,43,44,45,46,47,85,86,98,101,102,103,104,108,109,110,112,],[72,72,-92,-93,72,72,72,72,72,72,72,72,-92,-93,72,72,72,72,72,72,]),'DAMPERSAND':([40,41,42,65,98,101,102,112,137,140,141,143,144,145,146,147,],[75,-92,-93,75,75,-92,-93,75,75,-38,-28,-29,-30,-32,-33,-34,]),'OR':([40,41,42,65,98,101,102,112,137,140,141,143,144,145,146,147,],[76,-92,-93,76,76,-92,-93,76,76,-38,-28,-29,-30,-32,-33,-34,]),'STDIN':([48,],[82,]),'NFLOATTYPE':([60,97,169,170,171,172,173,174,],[111,111,111,-57,-58,-59,-60,-61,]),'EXCLAM':([60,97,],[113,113,]),'STRING':([61,155,181,226,],[118,211,246,211,]),'BOOL':([61,155,226,],[119,212,212,]),'CHAR':([61,],[120,]),'INT8':([61,155,226,],[121,213,213,]),'INT16':([61,155,226,],[122,214,214,]),'INT32':([61,155,226,],[123,215,215,]),'INT64':([61,155,226,],[124,216,216,]),'INT128':([61,155,226,],[125,217,217,]),'UINT8':([61,155,226,],[126,218,218,]),'UINT16':([61,155,226,],[127,219,219,]),'UINT32':([61,155,226,],[128,220,220,]),'UINT64':([61,155,226,],[129,221,221,]),'UINT128':([61,155,226,],[130,222,222,]),'FLOAT32':([61,155,226,],[131,223,223,]),'FLOAT64':([61,155,226,],[132,224,224,]),'AMPERSAND':([61,155,226,308,],[133,133,133,315,]),'VEC':([97,],[160,]),'LINKEDLIST':([97,],[163,]),'HASHMAP':([97,],[166,]),'TIMES':([100,108,109,110,111,],[171,-41,-42,-43,-44,]),'MINUS':([100,108,109,110,111,],[172,-41,-42,-43,-44,]),'PORCENTAJE':([100,108,109,110,111,],[173,-41,-42,-43,-44,]),'DIVIDE':([100,108,109,110,111,],[174,-41,-42,-43,-44,]),'COMILLA':([133,],[196,]),'STR':([133,262,],[197,297,]),'ARROWOPT':([156,],[226,]),'STATIC':([196,],[262,]),'COMA':([197,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,297,],[-88,268,-45,-46,-47,-48,-49,-50,-62,-63,-64,-65,-66,-79,-80,-81,-82,-83,-74,-75,-87,]),'NEW':([230,233,234,],[273,274,275,]),'READLINE':([265,],[299,]),'FROM':([281,],[307,]),'EXPECT':([330,],[332,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'metodo':([0,34,52,53,67,83,90,151,199,225,266,303,],[2,63,90,90,90,90,90,90,90,269,90,90,]),'funcion':([0,],[3,]),'asignacion':([0,34,52,53,67,83,90,151,199,225,266,303,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'impresion':([0,34,52,53,67,83,90,151,199,225,266,303,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'loop':([0,34,52,53,67,83,90,151,199,225,266,303,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'ifblock':([0,34,52,53,67,83,90,151,199,225,266,303,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'elseifblock':([0,34,52,53,67,83,90,151,199,225,266,303,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'elseblock':([0,34,52,53,67,83,90,151,199,225,266,303,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'vectorpush':([0,34,52,53,67,83,90,151,199,225,266,303,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'llpushfront':([0,34,52,53,67,83,90,151,199,225,266,303,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'llpopback':([0,34,52,53,67,83,90,151,199,225,266,303,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'sumaint':([0,34,52,53,67,83,90,151,199,225,266,303,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'entrada':([0,34,52,53,67,83,90,151,199,225,266,303,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'while':([0,34,52,53,67,83,90,151,199,225,266,303,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'ifparams':([22,24,35,51,87,317,],[36,49,64,88,150,323,]),'ifcondicion':([22,24,35,50,51,74,87,200,317,],[37,37,66,84,37,142,66,264,37,]),'boolean':([22,24,35,50,51,60,68,74,87,97,113,175,182,200,317,],[38,38,38,86,38,112,140,86,38,112,176,240,248,86,38,]),'comparacion':([22,24,35,50,51,60,74,87,97,200,317,],[40,40,65,65,40,107,40,65,107,40,40,]),'signocompar':([38,39,43,44,45,46,47,85,86,98,103,104,108,109,110,112,],[68,73,77,78,79,80,81,73,68,73,77,78,80,79,81,68,]),'signoconect':([40,65,98,112,137,],[74,74,167,175,200,]),'cuerpof':([52,53,67,83,90,151,199,266,303,],[89,91,139,149,153,205,263,300,310,]),'params':([54,268,],[93,301,]),'valor':([60,97,],[99,161,]),'valornumerico':([60,97,169,],[100,100,236,]),'expresion':([60,97,],[105,105,]),'conectores':([60,97,],[106,106,]),'intsize':([61,155,226,],[114,207,207,]),'uintsize':([61,155,226,],[115,208,208,]),'floatsize':([61,155,226,],[116,209,209,]),'strsize':([61,155,226,],[117,210,210,]),'estructuras':([97,],[162,]),'linkedlist':([97,],[164,]),'hashmap':([97,],[165,]),'signo':([100,],[169,]),'datatype':([155,226,],[206,270,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> metodo','cuerpo',1,'p_cuerpo','sintaxisAB.py',3),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintaxisAB.py',4),
  ('cuerpof -> metodo','cuerpof',1,'p_cuerpof','sintaxisJJ.py',6),
  ('cuerpof -> metodo cuerpof','cuerpof',2,'p_cuerpof','sintaxisJJ.py',7),
  ('metodo -> asignacion','metodo',1,'p_metodo','sintaxisAB.py',7),
  ('metodo -> impresion','metodo',1,'p_metodo','sintaxisAB.py',8),
  ('metodo -> loop','metodo',1,'p_metodo','sintaxisAB.py',9),
  ('metodo -> ifblock','metodo',1,'p_metodo','sintaxisAB.py',10),
  ('metodo -> elseifblock','metodo',1,'p_metodo','sintaxisAB.py',11),
  ('metodo -> elseblock','metodo',1,'p_metodo','sintaxisAB.py',12),
  ('metodo -> vectorpush','metodo',1,'p_metodo','sintaxisAB.py',13),
  ('metodo -> llpushfront','metodo',1,'p_metodo','sintaxisAB.py',14),
  ('metodo -> llpopback','metodo',1,'p_metodo','sintaxisAB.py',15),
  ('metodo -> sumaint','metodo',1,'p_metodo','sintaxisAB.py',16),
  ('metodo -> entrada','metodo',1,'p_metodo','sintaxisAB.py',17),
  ('metodo -> while','metodo',1,'p_metodo','sintaxisAB.py',18),
  ('valor -> valornumerico','valor',1,'p_valor','sintaxisPR.py',7),
  ('valor -> TRUE','valor',1,'p_valor','sintaxisPR.py',8),
  ('valor -> FALSE','valor',1,'p_valor','sintaxisPR.py',9),
  ('valor -> ID','valor',1,'p_valor','sintaxisPR.py',10),
  ('valor -> IDCHAR','valor',1,'p_valor','sintaxisPR.py',11),
  ('valor -> IDSTRING','valor',1,'p_valor','sintaxisPR.py',12),
  ('valor -> expresion','valor',1,'p_valor','sintaxisPR.py',13),
  ('valor -> conectores','valor',1,'p_valor','sintaxisPR.py',14),
  ('valor -> comparacion','valor',1,'p_valor','sintaxisPR.py',15),
  ('estructuras -> linkedlist','estructuras',1,'p_estructuras','sintaxisPR.py',21),
  ('estructuras -> hashmap','estructuras',1,'p_estructuras','sintaxisPR.py',22),
  ('comparacion -> ID signocompar ID','comparacion',3,'p_comparacion_id','sintaxisAB.py',22),
  ('comparacion -> IDCHAR signocompar IDCHAR','comparacion',3,'p_comparacion_id','sintaxisAB.py',23),
  ('comparacion -> IDSTRING signocompar IDSTRING','comparacion',3,'p_comparacion_id','sintaxisAB.py',24),
  ('asignacion -> LET MUT ID IGUAL VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','asignacion',10,'p_asignacion_let_mut_vec','main.py',26),
  ('comparacion -> INTTYPE signocompar INTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',27),
  ('comparacion -> NINTTYPE signocompar NINTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',28),
  ('comparacion -> FLOATTYPE signocompar FLOATTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',29),
  ('while -> WHILE ifparams LLLAVE cuerpof RLLAVE','while',5,'p_while','sintaxisPR.py',27),
  ('asignacion -> CONST ID COLON intsize IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_int','main.py',33),
  ('asignacion -> CONST ID COLON intsize IGUAL NINTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_int','main.py',34),
  ('comparacion -> boolean signocompar boolean','comparacion',3,'p_comparacion_bool','sintaxisAB.py',32),
  ('hashmap -> HASHMAP DOSDOBLEPUNTOS NEW LPAREN RPAREN','hashmap',5,'p_hashmap','sintaxisPR.py',32),
  ('expresion -> valornumerico signo valornumerico','expresion',3,'p_expresion','sintaxisPR.py',36),
  ('valornumerico -> NINTTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',41),
  ('valornumerico -> INTTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',42),
  ('valornumerico -> FLOATTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',43),
  ('valornumerico -> NFLOATTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',44),
  ('datatype -> intsize','datatype',1,'p_datatype','sintaxisJJ.py',42),
  ('datatype -> uintsize','datatype',1,'p_datatype','sintaxisJJ.py',43),
  ('datatype -> floatsize','datatype',1,'p_datatype','sintaxisJJ.py',44),
  ('datatype -> strsize','datatype',1,'p_datatype','sintaxisJJ.py',45),
  ('datatype -> STRING','datatype',1,'p_datatype','sintaxisJJ.py',46),
  ('datatype -> BOOL','datatype',1,'p_datatype','sintaxisJJ.py',47),
  ('asignacion -> CONST ID COLON uintsize IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_uint','main.py',42),
  ('signocompar -> MAYORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',45),
  ('signocompar -> MENORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',46),
  ('signocompar -> DIFERENTE','signocompar',1,'p_signocompar','sintaxisAB.py',47),
  ('signocompar -> IDENTICO','signocompar',1,'p_signocompar','sintaxisAB.py',48),
  ('asignacion -> CONST ID COLON floatsize IGUAL FLOATTYPE ENDCHAR','asignacion',7,'p_asignacion_const_float','main.py',48),
  ('signo -> PLUS','signo',1,'p_signo','sintaxisPR.py',49),
  ('signo -> TIMES','signo',1,'p_signo','sintaxisPR.py',50),
  ('signo -> MINUS','signo',1,'p_signo','sintaxisPR.py',51),
  ('signo -> PORCENTAJE','signo',1,'p_signo','sintaxisPR.py',52),
  ('signo -> DIVIDE','signo',1,'p_signo','sintaxisPR.py',53),
  ('intsize -> INT8','intsize',1,'p_intsize','sintaxisJJ.py',51),
  ('intsize -> INT16','intsize',1,'p_intsize','sintaxisJJ.py',52),
  ('intsize -> INT32','intsize',1,'p_intsize','sintaxisJJ.py',53),
  ('intsize -> INT64','intsize',1,'p_intsize','sintaxisJJ.py',54),
  ('intsize -> INT128','intsize',1,'p_intsize','sintaxisJJ.py',55),
  ('linkedlist -> LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','linkedlist',6,'p_linkedlist','sintaxisAB.py',52),
  ('asignacion -> CONST ID COLON strsize IGUAL IDSTRING ENDCHAR','asignacion',7,'p_asignacion_const_str','main.py',53),
  ('conectores -> boolean signoconect boolean','conectores',3,'p_conectores','sintaxisAB.py',55),
  ('conectores -> EXCLAM boolean','conectores',2,'p_conectores','sintaxisAB.py',56),
  ('conectores -> ID signoconect ID','conectores',3,'p_conectores','sintaxisAB.py',57),
  ('entrada -> IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN ENDCHAR','entrada',13,'p_entrada','sintaxisPR.py',58),
  ('entrada -> IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN POINT EXPECT LPAREN IDSTRING RPAREN ENDCHAR','entrada',18,'p_entrada','sintaxisPR.py',59),
  ('floatsize -> FLOAT32','floatsize',1,'p_floatsize','sintaxisJJ.py',59),
  ('floatsize -> FLOAT64','floatsize',1,'p_floatsize','sintaxisJJ.py',60),
  ('asignacion -> CONST ID COLON STRING IGUAL STRING DOSDOBLEPUNTOS FROM LPAREN IDSTRING RPAREN ENDCHAR','asignacion',12,'p_asignacion_const_string','main.py',59),
  ('signoconect -> DAMPERSAND','signoconect',1,'p_signoconect','sintaxisAB.py',60),
  ('signoconect -> OR','signoconect',1,'p_signoconect','sintaxisAB.py',61),
  ('uintsize -> UINT8','uintsize',1,'p_uintsize','sintaxisJJ.py',64),
  ('uintsize -> UINT16','uintsize',1,'p_uintsize','sintaxisJJ.py',65),
  ('uintsize -> UINT32','uintsize',1,'p_uintsize','sintaxisJJ.py',66),
  ('uintsize -> UINT64','uintsize',1,'p_uintsize','sintaxisJJ.py',67),
  ('uintsize -> UINT128','uintsize',1,'p_uintsize','sintaxisJJ.py',68),
  ('asignacion -> CONST ID COLON STRING IGUAL IDSTRING ENDCHAR','asignacion',7,'p_asignacion_const_string2','main.py',65),
  ('loop -> LOOP LLLAVE metodo RLLAVE','loop',4,'p_loop','sintaxisAB.py',69),
  ('asignacion -> CONST ID COLON BOOL IGUAL boolean ENDCHAR','asignacion',7,'p_asignacion_const_bool','main.py',71),
  ('strsize -> AMPERSAND COMILLA STATIC STR','strsize',4,'p_strsize','sintaxisJJ.py',72),
  ('strsize -> AMPERSAND STR','strsize',2,'p_strsize','sintaxisJJ.py',73),
  ('params -> ID COLON datatype','params',3,'p_params','sintaxisAB.py',72),
  ('params -> ID COLON datatype COMA params','params',5,'p_params','sintaxisAB.py',73),
  ('funcion -> FN ID LPAREN params RPAREN LLLAVE metodo RLLAVE','funcion',8,'p_funcion_sinreturn','sintaxisAB.py',76),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintaxisJJ.py',77),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintaxisJJ.py',78),
  ('asignacion -> CONST ID COLON CHAR IGUAL IDCHAR ENDCHAR','asignacion',7,'p_asignacion_const_char','main.py',77),
  ('impresion -> PRINTLN LPAREN IDSTRING RPAREN ENDCHAR','impresion',5,'p_impresion','sintaxisAB.py',79),
  ('vectorpush -> ID POINT PUSH LPAREN INTTYPE RPAREN ENDCHAR','vectorpush',7,'p_vectorpush','main.py',84),
  ('ifparams -> ifcondicion','ifparams',1,'p_ifparams','sintaxisJJ.py',86),
  ('ifparams -> boolean','ifparams',1,'p_ifparams','sintaxisJJ.py',87),
  ('ifparams -> ID','ifparams',1,'p_ifparams','sintaxisJJ.py',88),
  ('elseblock -> ifblock ELSE LLLAVE cuerpof RLLAVE','elseblock',5,'p_elseblock','sintaxisJJ.py',93),
  ('elseblock -> elseifblock ELSE LLLAVE cuerpof RLLAVE','elseblock',5,'p_elseblock','sintaxisJJ.py',94),
  ('elseifblock -> ifblock ELSE IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE','elseifblock',9,'p_elseifblock','sintaxisJJ.py',99),
  ('elseifblock -> ifblock ELSE IF ifparams LLLAVE cuerpof RLLAVE','elseifblock',7,'p_elseifblock','sintaxisJJ.py',100),
  ('ifblock -> IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE','ifblock',7,'p_ifblock','sintaxisJJ.py',105),
  ('ifblock -> IF ifparams LLLAVE cuerpof RLLAVE','ifblock',5,'p_ifblock','sintaxisJJ.py',106),
  ('asignacion -> LET MUT ID IGUAL valor ENDCHAR','asignacion',6,'p_asignacion_let_mut','main.py',106),
  ('asignacion -> LET MUT ID IGUAL estructuras ENDCHAR','asignacion',6,'p_asignacion_let_mut','main.py',107),
  ('ifcondicion -> comparacion','ifcondicion',1,'p_ifcondicion','sintaxisJJ.py',111),
  ('ifcondicion -> comparacion signoconect ifcondicion','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',112),
  ('ifcondicion -> LPAREN comparacion RPAREN','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',113),
  ('ifcondicion -> LPAREN comparacion RPAREN signoconect ifcondicion','ifcondicion',5,'p_ifcondicion','sintaxisJJ.py',114),
  ('ifcondicion -> LPAREN ifcondicion RPAREN','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',115),
  ('asignacion -> LET ID IGUAL valor ENDCHAR','asignacion',5,'p_asignacion_let','main.py',115),
  ('asignacion -> LET MUT ID IGUAL LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','asignacion',10,'p_asignacion_let_mut_ll','main.py',124),
  ('funcion -> FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof RETURN ifparams ENDCHAR RLLAVE','funcion',13,'p_funcion_retorno','sintaxisJJ.py',125),
  ('llpushfront -> ID POINT PUSH_FRONT LPAREN INTTYPE RPAREN ENDCHAR','llpushfront',7,'p_llpushfront','main.py',130),
  ('funcion -> FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof ID RLLAVE','funcion',11,'p_funcion_returnimplicito','sintaxisJJ.py',130),
  ('llpopback -> ID POINT POP_BACK LPAREN RPAREN ENDCHAR','llpopback',6,'p_llpopback','main.py',143),
  ('asignacion -> CONST ID COLON INT8 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_i8','main.py',156),
  ('asignacion -> CONST ID COLON INT16 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_i16','main.py',163),
  ('asignacion -> CONST ID COLON INT32 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_i32','main.py',170),
  ('asignacion -> CONST ID COLON INT64 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_i64','main.py',177),
  ('asignacion -> CONST ID COLON INT128 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_i128','main.py',184),
  ('asignacion -> CONST ID COLON UINT8 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_ui8','main.py',191),
  ('asignacion -> CONST ID COLON UINT16 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_ui16','main.py',198),
  ('asignacion -> CONST ID COLON UINT32 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_ui32','main.py',205),
  ('asignacion -> CONST ID COLON UINT64 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_ui64','main.py',212),
  ('asignacion -> CONST ID COLON UINT128 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_ui128','main.py',218),
  ('asignacion -> CONST ID COLON FLOAT32 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_f32','main.py',225),
  ('asignacion -> CONST ID COLON FLOAT64 IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_f64','main.py',232),
  ('sumaint -> ID PLUS ID','sumaint',3,'p_sumaint','main.py',238),
]
