
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ARROWOPT ASYNC AWAIT BOOL BREAK CHAR COLON COMA COMILLA CONST CONTINUE DAMPERSAND DIFERENTE DIVASIGN DIVIDE DOLAR DOSDOBLEPUNTOS DYN ELSE ENDCHAR ENUM ERR EXCLAM EXPECT FALSE FINAL FLOAT32 FLOAT64 FLOATTYPE FN FOR FORMAT FROM HASHMAP ID IDCHAR IDENTICO IDSTRING IF IGUAL IMPL IN INPUT INT128 INT16 INT32 INT64 INT8 INTERRO INTTYPE IO LCOR LET LINKEDLIST LLLAVE LOOP LPAREN MAINFN MATCH MAYORQUE MENORQUE MINUS MOVE MULTIASIGN MUT NEW NFLOATTYPE NINTTYPE OK OR PARSE PLUS POINT POINTERSIZE PORCENTAJE PRINTLN PRIV PUB PUSH RCOR READLINE REF RESTAASIGN RETURN RLLAVE RPAREN SELF SIZEOF STATIC STDIN STR STRING STRUCT SUMAASIGN SUPER TIMES TRUE TYPE TYPEOF UINT128 UINT16 UINT32 UINT64 UINT8 UNSAFE UNWRAPOR USE VEC WHERE WHILEcuerpo : metodo\n  | funcion\n  cuerpof : metodo\n  | metodo cuerpof\n  asignacion : LET ID IGUAL valorPam ENDCHARmetodo : asignacion\n  | impresion\n  | comparacion\n  | linkedlist\n  | loop\n  | conectores\n  | ifblock\n  | elseifblock\n  | elseblock\n  | vectorpush\n  valorPam : valornumerico\n  | TRUE\n  | FALSE\n  | ID\n  | IDCHAR\n  | IDSTRING\n  | expresion\n  | conectores\n  | comparacion\n  \n  asignacion : CONST ID COLON intsize IGUAL INTTYPE ENDCHAR\n  | CONST ID COLON intsize IGUAL NINTTYPE ENDCHAR\n  \n  vectorpush : ID POINT PUSH LPAREN INTTYPE RPAREN ENDCHAR\n  asignacion : CONST ID COLON uintsize IGUAL INTTYPE ENDCHARcomparacion : ID signocompar ID\n  | IDCHAR signocompar IDCHAR\n  | IDSTRING signocompar IDSTRINGasignacion : CONST ID COLON floatsize IGUAL FLOATTYPE ENDCHAR\n    estructuras : linkedlist\n    | hashmap\n    asignacion : CONST ID COLON strsize IGUAL IDSTRING ENDCHARcomparacion : INTTYPE signocompar INTTYPE\n  | NINTTYPE signocompar NINTTYPE\n  | FLOATTYPE signocompar FLOATTYPE\n  asignacion : CONST ID COLON STRING IGUAL STRING DOSDOBLEPUNTOS FROM LPAREN IDSTRING RPAREN ENDCHARasignacion : CONST ID COLON STRING IGUAL IDSTRING ENDCHARwhile : WHILE ifparams LLLAVE cuerpof RLLAVEcomparacion : boolean signocompar booleanvalor : INTTYPE\n  | FLOATTYPE\n  | NINTTYPE\n  | ID\n  | TRUE\n  | FALSE\n  | IDCHAR\n  | IDSTRINGasignacion : CONST ID COLON BOOL IGUAL boolean ENDCHARhashmap : HASHMAP DOSDOBLEPUNTOS NEW LPAREN RPARENasignacion : CONST ID COLON CHAR IGUAL IDCHAR ENDCHARvec : VEC DOSDOBLEPUNTOS NEW LPAREN RPARENasignacion : LET MUT ID IGUAL valorPam ENDCHAR\n  | LET MUT ID IGUAL estructuras ENDCHAR\n  | LET MUT ID IGUAL VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARexpresion :  valornumerico signo valornumericosignocompar : MAYORQUE \n  | MENORQUE\n  | DIFERENTE\n  | IDENTICO\n  \n  valornumerico : NINTTYPE\n  | INTTYPE\n  | FLOATTYPE\n  | NFLOATTYPE\n  \n  datatype : intsize\n  | uintsize\n  | floatsize\n  | strsize\n  | STRING\n  | BOOLlinkedlist : LET MUT ID IGUAL LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARconectores : boolean signoconect boolean \n  | EXCLAM boolean\n  | ID signoconect ID\n  signo : PLUS\n  | TIMES\n  | MINUS\n  | PORCENTAJE\n  | DIVIDE\n  \n  intsize : INT8\n  | INT16\n  | INT32\n  | INT64\n  | INT128signoconect : DAMPERSAND\n  | OR\n  \n  entrada : IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN ENDCHAR\n  | IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN POINT EXPECT LPAREN IDSTRING RPAREN ENDCHAR\n  \n  floatsize : FLOAT32\n  | FLOAT64loop : LOOP LLLAVE metodo RLLAVE\n  uintsize : UINT8\n  | UINT16\n  | UINT32\n  | UINT64\n  | UINT128params : ID COLON datatype \n  | ID COLON datatype COMA paramsfuncion : FN ID LPAREN params RPAREN LLLAVE metodo RLLAVEimpresion : PRINTLN LPAREN valor RPAREN ENDCHAR\n  strsize : AMPERSAND COMILLA STATIC STR\n  | AMPERSAND STR\n  \n  boolean : TRUE\n  | FALSE\n  \n  ifparams : ifcondicion\n  | boolean\n  | ID\n  \n  elseblock : ifblock ELSE LLLAVE cuerpof RLLAVE\n  | elseifblock ELSE LLLAVE cuerpof RLLAVE\n  \n  elseifblock : ifblock ELSE IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE\n  | ifblock ELSE IF ifparams LLLAVE cuerpof RLLAVE\n  \n  ifblock : IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE\n  | IF ifparams LLLAVE cuerpof RLLAVE\n  \n  ifcondicion : comparacion\n  | comparacion signoconect ifcondicion\n  | LPAREN comparacion RPAREN\n  | LPAREN comparacion RPAREN signoconect ifcondicion\n  | LPAREN ifcondicion RPAREN\n  \n  funcion : FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof RETURN ifparams ENDCHAR  RLLAVE\n  \n  funcion : FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof ID RLLAVE\n  '
    
_lr_action_items = {'FN':([0,],[14,]),'LET':([0,4,5,6,7,8,9,10,11,12,13,28,29,53,54,62,63,65,66,71,72,73,74,75,76,77,92,97,117,139,149,150,152,156,180,181,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,256,257,263,],[16,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,16,-75,16,16,-29,-76,-36,-37,-38,-31,-42,-74,-30,16,16,163,-93,16,-110,-111,-5,-102,16,-115,16,-55,-56,16,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,16,-112,-57,-73,-39,]),'CONST':([0,4,5,6,7,8,9,10,11,12,13,28,29,53,54,62,63,65,66,71,72,73,74,75,76,77,92,97,139,149,150,152,156,180,181,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,256,257,263,],[17,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,17,-75,17,17,-29,-76,-36,-37,-38,-31,-42,-74,-30,17,17,-93,17,-110,-111,-5,-102,17,-115,17,-55,-56,17,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,17,-112,-57,-73,-39,]),'PRINTLN':([0,4,5,6,7,8,9,10,11,12,13,28,29,53,54,62,63,65,66,71,72,73,74,75,76,77,92,97,139,149,150,152,156,180,181,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,256,257,263,],[24,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,24,-75,24,24,-29,-76,-36,-37,-38,-31,-42,-74,-30,24,24,-93,24,-110,-111,-5,-102,24,-115,24,-55,-56,24,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,24,-112,-57,-73,-39,]),'ID':([0,4,5,6,7,8,9,10,11,12,13,14,16,17,27,28,29,33,34,36,37,38,39,40,41,43,52,53,54,55,61,62,63,64,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,151,152,156,180,181,182,183,193,200,201,202,218,219,220,223,228,229,230,231,232,234,235,236,238,242,248,249,255,256,257,263,],[15,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,32,42,44,59,-105,-106,65,66,-59,-60,-61,-62,-87,-88,69,82,15,-75,59,59,15,15,99,-29,-76,102,-36,-37,-38,-31,-42,-74,-30,141,15,141,59,15,102,-93,15,-110,-4,-111,-5,-102,15,141,-115,15,224,-55,-56,15,-113,99,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,15,-112,254,59,-57,-73,-39,]),'IDCHAR':([0,4,5,6,7,8,9,10,11,12,13,27,28,29,36,37,38,39,40,41,51,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,152,156,177,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,255,256,257,263,],[23,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,23,-105,-106,-59,-60,-61,-62,-87,-88,77,85,23,-75,23,23,23,23,-29,-76,107,-36,-37,-38,-31,-42,-74,-30,23,23,23,23,23,107,-93,23,-110,-111,-5,214,-102,23,23,-115,23,-55,-56,23,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,23,-112,23,-57,-73,-39,]),'IDSTRING':([0,4,5,6,7,8,9,10,11,12,13,27,28,29,36,37,38,39,40,41,48,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,152,156,174,175,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,253,255,256,257,263,],[21,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,21,-105,-106,-59,-60,-61,-62,-87,-88,74,86,21,-75,21,21,21,21,-29,-76,108,-36,-37,-38,-31,-42,-74,-30,21,21,21,21,21,108,-93,21,-110,-111,-5,210,212,-102,21,21,-115,21,-55,-56,21,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,21,-112,258,21,-57,-73,-39,]),'INTTYPE':([0,4,5,6,7,8,9,10,11,12,13,27,28,29,36,37,38,39,40,41,45,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,101,117,139,149,150,152,156,157,158,159,160,161,162,171,172,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,255,256,257,263,],[18,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,18,-105,-106,-59,-60,-61,-62,-87,-88,71,79,18,-75,18,18,18,18,-29,-76,113,-36,-37,-38,-31,-42,-74,-30,18,18,18,18,18,155,113,-93,18,-110,-111,-5,198,-77,-78,-79,-80,-81,206,208,-102,18,18,-115,18,-55,-56,18,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,18,-112,18,-57,-73,-39,]),'NINTTYPE':([0,4,5,6,7,8,9,10,11,12,13,27,28,29,36,37,38,39,40,41,46,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,152,156,157,158,159,160,161,162,171,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,255,256,257,263,],[19,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,19,-105,-106,-59,-60,-61,-62,-87,-88,72,81,19,-75,19,19,19,19,-29,-76,112,-36,-37,-38,-31,-42,-74,-30,19,19,19,19,19,112,-93,19,-110,-111,-5,197,-77,-78,-79,-80,-81,207,-102,19,19,-115,19,-55,-56,19,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,19,-112,19,-57,-73,-39,]),'FLOATTYPE':([0,4,5,6,7,8,9,10,11,12,13,27,28,29,36,37,38,39,40,41,47,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,152,156,157,158,159,160,161,162,173,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,255,256,257,263,],[20,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,20,-105,-106,-59,-60,-61,-62,-87,-88,73,80,20,-75,20,20,20,20,-29,-76,114,-36,-37,-38,-31,-42,-74,-30,20,20,20,20,20,114,-93,20,-110,-111,-5,199,-77,-78,-79,-80,-81,209,-102,20,20,-115,20,-55,-56,20,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,20,-112,20,-57,-73,-39,]),'LOOP':([0,4,5,6,7,8,9,10,11,12,13,28,29,53,54,62,63,65,66,71,72,73,74,75,76,77,92,97,139,149,150,152,156,180,181,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,256,257,263,],[25,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,25,-75,25,25,-29,-76,-36,-37,-38,-31,-42,-74,-30,25,25,-93,25,-110,-111,-5,-102,25,-115,25,-55,-56,25,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,25,-112,-57,-73,-39,]),'EXCLAM':([0,4,5,6,7,8,9,10,11,12,13,28,29,53,54,62,63,65,66,68,71,72,73,74,75,76,77,92,97,117,139,149,150,152,156,180,181,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,256,257,263,],[26,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,26,-75,26,26,-29,-76,26,-36,-37,-38,-31,-42,-74,-30,26,26,26,-93,26,-110,-111,-5,-102,26,-115,26,-55,-56,26,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,26,-112,-57,-73,-39,]),'IF':([0,4,5,6,7,8,9,10,11,12,13,28,29,30,53,54,62,63,65,66,71,72,73,74,75,76,77,92,97,139,149,150,152,156,180,181,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,256,257,263,],[27,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,61,27,-75,27,27,-29,-76,-36,-37,-38,-31,-42,-74,-30,27,27,-93,27,-110,-111,-5,-102,27,-115,27,-55,-56,27,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,27,-112,-57,-73,-39,]),'TRUE':([0,4,5,6,7,8,9,10,11,12,13,26,27,28,29,36,37,38,39,40,41,49,50,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,152,156,176,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,255,256,257,263,],[28,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,28,28,-105,-106,-59,-60,-61,-62,-87,-88,28,28,83,28,-75,28,28,28,28,-29,-76,105,-36,-37,-38,-31,-42,-74,-30,28,28,28,28,28,105,-93,28,-110,-111,-5,28,-102,28,28,-115,28,-55,-56,28,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,28,-112,28,-57,-73,-39,]),'FALSE':([0,4,5,6,7,8,9,10,11,12,13,26,27,28,29,36,37,38,39,40,41,49,50,52,53,54,55,61,62,63,65,66,68,71,72,73,74,75,76,77,88,92,93,94,97,117,139,149,150,152,156,176,180,181,182,183,193,201,202,218,219,223,228,229,230,231,232,234,235,236,238,242,248,255,256,257,263,],[29,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,29,29,-105,-106,-59,-60,-61,-62,-87,-88,29,29,84,29,-75,29,29,29,29,-29,-76,106,-36,-37,-38,-31,-42,-74,-30,29,29,29,29,29,106,-93,29,-110,-111,-5,29,-102,29,29,-115,29,-55,-56,29,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,29,-112,29,-57,-73,-39,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,28,29,54,65,66,71,72,73,74,75,76,77,139,150,152,156,180,183,201,202,219,223,228,229,230,231,232,234,235,236,238,241,248,256,257,259,263,264,],[0,-1,-2,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,-75,-29,-76,-36,-37,-38,-31,-42,-74,-30,-93,-110,-111,-5,-102,-115,-55,-56,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,-101,-112,-57,-73,-122,-39,-121,]),'RLLAVE':([4,5,6,7,8,9,10,11,12,13,28,29,54,65,66,71,72,73,74,75,76,77,87,96,97,98,139,146,150,151,152,156,180,183,185,201,202,216,219,221,223,228,229,230,231,232,234,235,236,238,239,248,254,256,257,262,263,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,-75,-29,-76,-36,-37,-38,-31,-42,-74,-30,139,150,-3,152,-93,183,-110,-4,-111,-5,-102,-115,219,-55,-56,238,-113,241,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,248,-112,259,-57,-73,264,-39,]),'RETURN':([4,5,6,7,8,9,10,11,12,13,28,29,54,65,66,71,72,73,74,75,76,77,97,139,150,151,152,156,180,183,201,202,219,223,228,229,230,231,232,234,235,236,238,248,249,256,257,263,],[-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-105,-106,-75,-29,-76,-36,-37,-38,-31,-42,-74,-30,-3,-93,-110,-4,-111,-5,-102,-115,-55,-56,-113,-27,-25,-26,-28,-32,-35,-40,-51,-53,-114,-112,255,-57,-73,-39,]),'ELSE':([10,11,183,219,238,248,],[30,31,-115,-113,-114,-112,]),'POINT':([15,],[35,]),'MAYORQUE':([15,18,19,20,21,22,23,28,29,58,59,102,105,106,107,108,112,113,114,116,141,142,],[36,36,36,36,36,36,36,-105,-106,36,36,36,-105,-106,36,36,36,36,36,36,36,36,]),'MENORQUE':([15,18,19,20,21,22,23,28,29,58,59,102,105,106,107,108,112,113,114,116,141,142,],[37,37,37,37,37,37,37,-105,-106,37,37,37,-105,-106,37,37,37,37,37,37,37,37,]),'DIFERENTE':([15,18,19,20,21,22,23,28,29,58,59,102,105,106,107,108,112,113,114,116,141,142,],[38,38,38,38,38,38,38,-105,-106,38,38,38,-105,-106,38,38,38,38,38,38,38,38,]),'IDENTICO':([15,18,19,20,21,22,23,28,29,58,59,102,105,106,107,108,112,113,114,116,141,142,],[39,39,39,39,39,39,39,-105,-106,39,39,39,-105,-106,39,39,39,39,39,39,39,39,]),'DAMPERSAND':([15,22,28,29,60,65,71,72,73,74,75,77,90,102,105,106,116,144,],[40,40,-105,-106,40,-29,-36,-37,-38,-31,-42,-30,40,40,-105,-106,40,40,]),'OR':([15,22,28,29,60,65,71,72,73,74,75,77,90,102,105,106,116,144,],[41,41,-105,-106,41,-29,-36,-37,-38,-31,-42,-30,41,41,-105,-106,41,41,]),'MUT':([16,163,],[43,200,]),'LPAREN':([24,27,32,40,41,55,61,67,88,93,94,182,225,226,227,247,255,],[52,55,64,-87,-88,88,94,101,88,88,88,88,244,245,246,253,88,]),'LLLAVE':([25,28,29,30,31,56,57,58,59,60,65,71,72,73,74,75,77,95,125,126,127,128,129,130,131,132,133,134,135,136,143,144,145,147,154,179,184,187,188,189,190,191,192,217,222,237,],[53,-105,-106,62,63,92,-107,-108,-109,-116,-29,-36,-37,-38,-31,-42,-30,149,-82,-83,-84,-85,-86,-94,-95,-96,-97,-98,-91,-92,181,-118,-120,-117,193,-104,218,-67,-68,-69,-70,-71,-72,-119,242,-103,]),'ENDCHAR':([28,29,54,57,58,59,60,65,66,71,72,73,74,75,76,77,102,103,104,105,106,107,108,109,110,111,112,113,114,115,138,144,145,147,164,165,168,169,195,196,197,198,199,206,207,208,209,210,212,213,214,217,250,251,252,257,260,261,],[-105,-106,-75,-107,-108,-109,-116,-29,-76,-36,-37,-38,-31,-42,-74,-30,-19,156,-16,-17,-18,-20,-21,-22,-23,-24,-63,-64,-65,-66,180,-118,-120,-117,201,202,-33,-34,223,-58,-63,-64,-65,228,229,230,231,232,234,235,236,-119,256,257,-52,-73,262,263,]),'RPAREN':([28,29,58,59,60,65,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86,89,90,91,100,125,126,127,128,129,130,131,132,133,134,135,136,140,144,145,147,148,155,179,186,187,188,189,190,191,192,217,237,240,244,245,246,258,],[-105,-106,-108,-109,-116,-29,-36,-37,-38,-31,-42,-30,138,-43,-44,-45,-46,-47,-48,-49,-50,143,144,145,154,-82,-83,-84,-85,-86,-94,-95,-96,-97,-98,-91,-92,145,-118,-120,-117,184,195,-104,-99,-67,-68,-69,-70,-71,-72,-119,-103,-100,250,251,252,261,]),'PUSH':([35,],[67,]),'IGUAL':([42,69,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,179,224,237,],[68,117,171,172,173,174,175,176,177,-82,-83,-84,-85,-86,-94,-95,-96,-97,-98,-91,-92,-104,243,-103,]),'COLON':([44,99,],[70,153,]),'NFLOATTYPE':([68,117,157,158,159,160,161,162,],[115,115,115,-77,-78,-79,-80,-81,]),'STRING':([70,153,175,194,],[122,191,211,191,]),'BOOL':([70,153,194,],[123,192,192,]),'CHAR':([70,],[124,]),'INT8':([70,153,194,],[125,125,125,]),'INT16':([70,153,194,],[126,126,126,]),'INT32':([70,153,194,],[127,127,127,]),'INT64':([70,153,194,],[128,128,128,]),'INT128':([70,153,194,],[129,129,129,]),'UINT8':([70,153,194,],[130,130,130,]),'UINT16':([70,153,194,],[131,131,131,]),'UINT32':([70,153,194,],[132,132,132,]),'UINT64':([70,153,194,],[133,133,133,]),'UINT128':([70,153,194,],[134,134,134,]),'FLOAT32':([70,153,194,],[135,135,135,]),'FLOAT64':([70,153,194,],[136,136,136,]),'AMPERSAND':([70,153,194,],[137,137,137,]),'PLUS':([104,112,113,114,115,],[158,-63,-64,-65,-66,]),'TIMES':([104,112,113,114,115,],[159,-63,-64,-65,-66,]),'MINUS':([104,112,113,114,115,],[160,-63,-64,-65,-66,]),'PORCENTAJE':([104,112,113,114,115,],[161,-63,-64,-65,-66,]),'DIVIDE':([104,112,113,114,115,],[162,-63,-64,-65,-66,]),'VEC':([117,],[166,]),'LINKEDLIST':([117,243,],[167,167,]),'HASHMAP':([117,],[170,]),'COMA':([125,126,127,128,129,130,131,132,133,134,135,136,179,186,187,188,189,190,191,192,237,],[-82,-83,-84,-85,-86,-94,-95,-96,-97,-98,-91,-92,-104,220,-67,-68,-69,-70,-71,-72,-103,]),'COMILLA':([137,],[178,]),'STR':([137,215,],[179,237,]),'ARROWOPT':([154,],[194,]),'DOSDOBLEPUNTOS':([166,167,170,211,],[203,204,205,233,]),'STATIC':([178,],[215,]),'NEW':([203,204,205,],[225,226,227,]),'FROM':([233,],[247,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'metodo':([0,53,62,63,92,97,149,181,193,218,242,],[2,87,97,97,97,97,97,97,221,97,97,]),'funcion':([0,],[3,]),'asignacion':([0,53,62,63,92,97,149,181,193,218,242,],[4,4,4,4,4,4,4,4,4,4,4,]),'impresion':([0,53,62,63,92,97,149,181,193,218,242,],[5,5,5,5,5,5,5,5,5,5,5,]),'comparacion':([0,27,53,55,61,62,63,68,88,92,93,94,97,117,149,181,182,193,218,242,255,],[6,60,6,90,60,6,6,111,90,6,60,90,6,111,6,6,60,6,6,6,60,]),'linkedlist':([0,53,62,63,92,97,117,149,181,193,218,242,],[7,7,7,7,7,7,168,7,7,7,7,7,]),'loop':([0,53,62,63,92,97,149,181,193,218,242,],[8,8,8,8,8,8,8,8,8,8,8,]),'conectores':([0,53,62,63,68,92,97,117,149,181,193,218,242,],[9,9,9,9,110,9,9,110,9,9,9,9,9,]),'ifblock':([0,53,62,63,92,97,149,181,193,218,242,],[10,10,10,10,10,10,10,10,10,10,10,]),'elseifblock':([0,53,62,63,92,97,149,181,193,218,242,],[11,11,11,11,11,11,11,11,11,11,11,]),'elseblock':([0,53,62,63,92,97,149,181,193,218,242,],[12,12,12,12,12,12,12,12,12,12,12,]),'vectorpush':([0,53,62,63,92,97,149,181,193,218,242,],[13,13,13,13,13,13,13,13,13,13,13,]),'boolean':([0,26,27,49,50,53,55,61,62,63,68,88,92,93,94,97,117,149,176,181,182,193,218,242,255,],[22,54,58,75,76,22,58,58,22,22,116,142,22,142,58,22,116,22,213,22,142,22,22,22,58,]),'signocompar':([15,18,19,20,21,22,23,58,59,102,107,108,112,113,114,116,141,142,],[33,45,46,47,48,49,51,49,33,33,51,48,46,45,47,49,33,49,]),'signoconect':([15,22,60,90,102,116,144,],[34,50,93,93,34,50,182,]),'ifparams':([27,55,61,94,255,],[56,89,95,148,260,]),'ifcondicion':([27,55,61,88,93,94,182,255,],[57,91,57,140,147,91,217,57,]),'valor':([52,],[78,]),'cuerpof':([62,63,92,97,149,181,218,242,],[96,98,146,151,185,216,239,249,]),'params':([64,220,],[100,240,]),'valorPam':([68,117,],[103,164,]),'valornumerico':([68,117,157,],[104,104,196,]),'expresion':([68,117,],[109,109,]),'intsize':([70,153,194,],[118,187,187,]),'uintsize':([70,153,194,],[119,188,188,]),'floatsize':([70,153,194,],[120,189,189,]),'strsize':([70,153,194,],[121,190,190,]),'signo':([104,],[157,]),'estructuras':([117,],[165,]),'hashmap':([117,],[169,]),'datatype':([153,194,],[186,222,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> metodo','cuerpo',1,'p_cuerpo','sintaxisAB.py',3),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintaxisAB.py',4),
  ('cuerpof -> metodo','cuerpof',1,'p_cuerpof','sintaxisJJ.py',6),
  ('cuerpof -> metodo cuerpof','cuerpof',2,'p_cuerpof','sintaxisJJ.py',7),
  ('asignacion -> LET ID IGUAL valorPam ENDCHAR','asignacion',5,'p_asignacion_let','sintaxisPR.py',5),
  ('metodo -> asignacion','metodo',1,'p_metodo','sintaxisAB.py',7),
  ('metodo -> impresion','metodo',1,'p_metodo','sintaxisAB.py',8),
  ('metodo -> comparacion','metodo',1,'p_metodo','sintaxisAB.py',9),
  ('metodo -> linkedlist','metodo',1,'p_metodo','sintaxisAB.py',10),
  ('metodo -> loop','metodo',1,'p_metodo','sintaxisAB.py',11),
  ('metodo -> conectores','metodo',1,'p_metodo','sintaxisAB.py',12),
  ('metodo -> ifblock','metodo',1,'p_metodo','sintaxisAB.py',13),
  ('metodo -> elseifblock','metodo',1,'p_metodo','sintaxisAB.py',14),
  ('metodo -> elseblock','metodo',1,'p_metodo','sintaxisAB.py',15),
  ('metodo -> vectorpush','metodo',1,'p_metodo','sintaxisAB.py',16),
  ('valorPam -> valornumerico','valorPam',1,'p_valorPam','sintaxisPR.py',9),
  ('valorPam -> TRUE','valorPam',1,'p_valorPam','sintaxisPR.py',10),
  ('valorPam -> FALSE','valorPam',1,'p_valorPam','sintaxisPR.py',11),
  ('valorPam -> ID','valorPam',1,'p_valorPam','sintaxisPR.py',12),
  ('valorPam -> IDCHAR','valorPam',1,'p_valorPam','sintaxisPR.py',13),
  ('valorPam -> IDSTRING','valorPam',1,'p_valorPam','sintaxisPR.py',14),
  ('valorPam -> expresion','valorPam',1,'p_valorPam','sintaxisPR.py',15),
  ('valorPam -> conectores','valorPam',1,'p_valorPam','sintaxisPR.py',16),
  ('valorPam -> comparacion','valorPam',1,'p_valorPam','sintaxisPR.py',17),
  ('asignacion -> CONST ID COLON intsize IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_int','sintaxisJJ.py',12),
  ('asignacion -> CONST ID COLON intsize IGUAL NINTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_int','sintaxisJJ.py',13),
  ('vectorpush -> ID POINT PUSH LPAREN INTTYPE RPAREN ENDCHAR','vectorpush',7,'p_vectorpush','main.py',16),
  ('asignacion -> CONST ID COLON uintsize IGUAL INTTYPE ENDCHAR','asignacion',7,'p_asignacion_const_uint','sintaxisJJ.py',17),
  ('comparacion -> ID signocompar ID','comparacion',3,'p_comparacion_id','sintaxisAB.py',20),
  ('comparacion -> IDCHAR signocompar IDCHAR','comparacion',3,'p_comparacion_id','sintaxisAB.py',21),
  ('comparacion -> IDSTRING signocompar IDSTRING','comparacion',3,'p_comparacion_id','sintaxisAB.py',22),
  ('asignacion -> CONST ID COLON floatsize IGUAL FLOATTYPE ENDCHAR','asignacion',7,'p_asignacion_const_float','sintaxisJJ.py',20),
  ('estructuras -> linkedlist','estructuras',1,'p_estructuras','sintaxisPR.py',23),
  ('estructuras -> hashmap','estructuras',1,'p_estructuras','sintaxisPR.py',24),
  ('asignacion -> CONST ID COLON strsize IGUAL IDSTRING ENDCHAR','asignacion',7,'p_asignacion_const_str','sintaxisJJ.py',23),
  ('comparacion -> INTTYPE signocompar INTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',25),
  ('comparacion -> NINTTYPE signocompar NINTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',26),
  ('comparacion -> FLOATTYPE signocompar FLOATTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',27),
  ('asignacion -> CONST ID COLON STRING IGUAL STRING DOSDOBLEPUNTOS FROM LPAREN IDSTRING RPAREN ENDCHAR','asignacion',12,'p_asignacion_const_string','sintaxisJJ.py',26),
  ('asignacion -> CONST ID COLON STRING IGUAL IDSTRING ENDCHAR','asignacion',7,'p_asignacion_const_string2','sintaxisJJ.py',29),
  ('while -> WHILE ifparams LLLAVE cuerpof RLLAVE','while',5,'p_while','sintaxisPR.py',29),
  ('comparacion -> boolean signocompar boolean','comparacion',3,'p_comparacion_bool','sintaxisAB.py',30),
  ('valor -> INTTYPE','valor',1,'p_valor','sintaxisAB.py',33),
  ('valor -> FLOATTYPE','valor',1,'p_valor','sintaxisAB.py',34),
  ('valor -> NINTTYPE','valor',1,'p_valor','sintaxisAB.py',35),
  ('valor -> ID','valor',1,'p_valor','sintaxisAB.py',36),
  ('valor -> TRUE','valor',1,'p_valor','sintaxisAB.py',37),
  ('valor -> FALSE','valor',1,'p_valor','sintaxisAB.py',38),
  ('valor -> IDCHAR','valor',1,'p_valor','sintaxisAB.py',39),
  ('valor -> IDSTRING','valor',1,'p_valor','sintaxisAB.py',40),
  ('asignacion -> CONST ID COLON BOOL IGUAL boolean ENDCHAR','asignacion',7,'p_asignacion_const_bool','sintaxisJJ.py',34),
  ('hashmap -> HASHMAP DOSDOBLEPUNTOS NEW LPAREN RPAREN','hashmap',5,'p_hashmap','sintaxisPR.py',34),
  ('asignacion -> CONST ID COLON CHAR IGUAL IDCHAR ENDCHAR','asignacion',7,'p_asignacion_const_char','sintaxisJJ.py',37),
  ('vec -> VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN','vec',5,'p_vec','sintaxisPR.py',38),
  ('asignacion -> LET MUT ID IGUAL valorPam ENDCHAR','asignacion',6,'p_asignacion_let_mut','main.py',39),
  ('asignacion -> LET MUT ID IGUAL estructuras ENDCHAR','asignacion',6,'p_asignacion_let_mut','main.py',40),
  ('asignacion -> LET MUT ID IGUAL VEC DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','asignacion',10,'p_asignacion_let_mut','main.py',41),
  ('expresion -> valornumerico signo valornumerico','expresion',3,'p_expresion','sintaxisPR.py',42),
  ('signocompar -> MAYORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',43),
  ('signocompar -> MENORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',44),
  ('signocompar -> DIFERENTE','signocompar',1,'p_signocompar','sintaxisAB.py',45),
  ('signocompar -> IDENTICO','signocompar',1,'p_signocompar','sintaxisAB.py',46),
  ('valornumerico -> NINTTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',47),
  ('valornumerico -> INTTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',48),
  ('valornumerico -> FLOATTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',49),
  ('valornumerico -> NFLOATTYPE','valornumerico',1,'p_valornumerico','sintaxisPR.py',50),
  ('datatype -> intsize','datatype',1,'p_datatype','sintaxisJJ.py',48),
  ('datatype -> uintsize','datatype',1,'p_datatype','sintaxisJJ.py',49),
  ('datatype -> floatsize','datatype',1,'p_datatype','sintaxisJJ.py',50),
  ('datatype -> strsize','datatype',1,'p_datatype','sintaxisJJ.py',51),
  ('datatype -> STRING','datatype',1,'p_datatype','sintaxisJJ.py',52),
  ('datatype -> BOOL','datatype',1,'p_datatype','sintaxisJJ.py',53),
  ('linkedlist -> LET MUT ID IGUAL LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','linkedlist',10,'p_linkedlist','sintaxisAB.py',50),
  ('conectores -> boolean signoconect boolean','conectores',3,'p_conectores','sintaxisAB.py',53),
  ('conectores -> EXCLAM boolean','conectores',2,'p_conectores','sintaxisAB.py',54),
  ('conectores -> ID signoconect ID','conectores',3,'p_conectores','sintaxisAB.py',55),
  ('signo -> PLUS','signo',1,'p_signo','sintaxisPR.py',55),
  ('signo -> TIMES','signo',1,'p_signo','sintaxisPR.py',56),
  ('signo -> MINUS','signo',1,'p_signo','sintaxisPR.py',57),
  ('signo -> PORCENTAJE','signo',1,'p_signo','sintaxisPR.py',58),
  ('signo -> DIVIDE','signo',1,'p_signo','sintaxisPR.py',59),
  ('intsize -> INT8','intsize',1,'p_intsize','sintaxisJJ.py',57),
  ('intsize -> INT16','intsize',1,'p_intsize','sintaxisJJ.py',58),
  ('intsize -> INT32','intsize',1,'p_intsize','sintaxisJJ.py',59),
  ('intsize -> INT64','intsize',1,'p_intsize','sintaxisJJ.py',60),
  ('intsize -> INT128','intsize',1,'p_intsize','sintaxisJJ.py',61),
  ('signoconect -> DAMPERSAND','signoconect',1,'p_signoconect','sintaxisAB.py',58),
  ('signoconect -> OR','signoconect',1,'p_signoconect','sintaxisAB.py',59),
  ('entrada -> IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN ENDCHAR','entrada',13,'p_entrada','sintaxisPR.py',64),
  ('entrada -> IO DOSDOBLEPUNTOS STDIN LPAREN RPAREN POINT READLINE LPAREN AMPERSAND MUT ID RPAREN POINT EXPECT LPAREN IDSTRING RPAREN ENDCHAR','entrada',18,'p_entrada','sintaxisPR.py',65),
  ('floatsize -> FLOAT32','floatsize',1,'p_floatsize','sintaxisJJ.py',65),
  ('floatsize -> FLOAT64','floatsize',1,'p_floatsize','sintaxisJJ.py',66),
  ('loop -> LOOP LLLAVE metodo RLLAVE','loop',4,'p_loop','sintaxisAB.py',67),
  ('uintsize -> UINT8','uintsize',1,'p_uintsize','sintaxisJJ.py',70),
  ('uintsize -> UINT16','uintsize',1,'p_uintsize','sintaxisJJ.py',71),
  ('uintsize -> UINT32','uintsize',1,'p_uintsize','sintaxisJJ.py',72),
  ('uintsize -> UINT64','uintsize',1,'p_uintsize','sintaxisJJ.py',73),
  ('uintsize -> UINT128','uintsize',1,'p_uintsize','sintaxisJJ.py',74),
  ('params -> ID COLON datatype','params',3,'p_params','sintaxisAB.py',70),
  ('params -> ID COLON datatype COMA params','params',5,'p_params','sintaxisAB.py',71),
  ('funcion -> FN ID LPAREN params RPAREN LLLAVE metodo RLLAVE','funcion',8,'p_funcion_sinreturn','sintaxisAB.py',74),
  ('impresion -> PRINTLN LPAREN valor RPAREN ENDCHAR','impresion',5,'p_impresion','sintaxisAB.py',77),
  ('strsize -> AMPERSAND COMILLA STATIC STR','strsize',4,'p_strsize','sintaxisJJ.py',78),
  ('strsize -> AMPERSAND STR','strsize',2,'p_strsize','sintaxisJJ.py',79),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintaxisJJ.py',83),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintaxisJJ.py',84),
  ('ifparams -> ifcondicion','ifparams',1,'p_ifparams','sintaxisJJ.py',92),
  ('ifparams -> boolean','ifparams',1,'p_ifparams','sintaxisJJ.py',93),
  ('ifparams -> ID','ifparams',1,'p_ifparams','sintaxisJJ.py',94),
  ('elseblock -> ifblock ELSE LLLAVE cuerpof RLLAVE','elseblock',5,'p_elseblock','sintaxisJJ.py',99),
  ('elseblock -> elseifblock ELSE LLLAVE cuerpof RLLAVE','elseblock',5,'p_elseblock','sintaxisJJ.py',100),
  ('elseifblock -> ifblock ELSE IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE','elseifblock',9,'p_elseifblock','sintaxisJJ.py',105),
  ('elseifblock -> ifblock ELSE IF ifparams LLLAVE cuerpof RLLAVE','elseifblock',7,'p_elseifblock','sintaxisJJ.py',106),
  ('ifblock -> IF LPAREN ifparams RPAREN LLLAVE cuerpof RLLAVE','ifblock',7,'p_ifblock','sintaxisJJ.py',111),
  ('ifblock -> IF ifparams LLLAVE cuerpof RLLAVE','ifblock',5,'p_ifblock','sintaxisJJ.py',112),
  ('ifcondicion -> comparacion','ifcondicion',1,'p_ifcondicion','sintaxisJJ.py',117),
  ('ifcondicion -> comparacion signoconect ifcondicion','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',118),
  ('ifcondicion -> LPAREN comparacion RPAREN','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',119),
  ('ifcondicion -> LPAREN comparacion RPAREN signoconect ifcondicion','ifcondicion',5,'p_ifcondicion','sintaxisJJ.py',120),
  ('ifcondicion -> LPAREN ifcondicion RPAREN','ifcondicion',3,'p_ifcondicion','sintaxisJJ.py',121),
  ('funcion -> FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof RETURN ifparams ENDCHAR RLLAVE','funcion',13,'p_funcion_retorno','sintaxisJJ.py',131),
  ('funcion -> FN ID LPAREN params RPAREN ARROWOPT datatype LLLAVE cuerpof ID RLLAVE','funcion',11,'p_funcion_returnimplicito','sintaxisJJ.py',136),
]
