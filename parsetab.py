
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ARROWOPT ASYNC AWAIT BOOL BREAK CHAR COLON COMA COMILLA CONST CONTINUE DAMPERSAND DIFERENTE DIVASIGN DIVIDE DOLAR DOSDOBLEPUNTOS DYN ELSE ENDCHAR ENUM ERR EXCLAM EXPECT FALSE FINAL FLOAT32 FLOAT64 FLOATTYPE FN FOR FORMAT FROM HASHMAP ID IDCHAR IDENTICO IDSTRING IF IGUAL IMPL IN INPUT INT128 INT16 INT32 INT64 INT8 INTERRO INTTYPE LCOR LET LINKEDLIST LLLAVE LOOP LPAREN MAINFN MATCH MAYORQUE MENORQUE MINUS MOVE MULTIASIGN MUT NEW NINTTYPE OK OR PARSE PLUS POINT POINTERSIZE PORCENTAJE PRINTLN PRIV PUB RCOR REF RESTAASIGN RETURN RLLAVE RPAREN SELF SIZEOF STATIC STR STRING STRUCT SUMAASIGN SUPER TIMES TRUE TYPE TYPEOF UINT128 UINT16 UINT32 UINT64 UINT8 UNSAFE UNWRAPOR USE VEC WHEREcuerpo : metodo\n  | funcionmetodo : asignacion\n  | impresion\n  | comparacion\n  | linkedlist\n  | loop\n  | conectores\n  asignacion : LET MUT ID IGUAL valor ENDCHAR\n  | LET ID IGUAL valor ENDCHAR\n  | CONST ID IGUAL valor ENDCHARcomparacion : ID signocompar ID\n  | IDCHAR signocompar IDCHAR\n  | IDSTRING signocompar IDSTRINGcomparacion : INTTYPE signocompar INTTYPE\n  | NINTTYPE signocompar NINTTYPE\n  | FLOATTYPE signocompar FLOATTYPE\n  comparacion : boolean signocompar booleanvalor : INTTYPE\n  | FLOATTYPE\n  | NINTTYPE\n  | ID\n  | TRUE\n  | FALSE\n  | IDCHAR\n  | IDSTRINGsignocompar : MAYORQUE \n  | MENORQUE\n  | DIFERENTE\n  | IDENTICO\n  linkedlist : LET MUT ID IGUAL LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHARconectores : boolean signoconect boolean \n  | EXCLAM boolean\n  | ID signoconect IDsignoconect : DAMPERSAND\n  | OR\n  \n  boolean : TRUE\n  | FALSE\n  loop : LOOP LLLAVE metodo RLLAVEparams : ID COLON INT16 \n  | ID COLON INT16 COMA paramsfuncion : FN ID LPAREN params RPAREN LLLAVE metodo RLLAVEimpresion : PRINTLN LPAREN valor RPAREN ENDCHAR'
    
_lr_action_items = {'FN':([0,],[10,]),'LET':([0,45,85,],[12,12,12,]),'CONST':([0,45,85,],[13,13,13,]),'PRINTLN':([0,45,85,],[14,14,14,]),'ID':([0,10,12,13,26,27,28,29,30,31,32,33,34,37,45,47,51,52,72,85,88,],[11,25,35,36,48,49,-27,-28,-29,-30,-35,-36,50,57,11,70,57,57,57,11,70,]),'IDCHAR':([0,28,29,30,31,37,38,45,51,52,72,85,],[15,-27,-28,-29,-30,60,62,15,60,60,60,15,]),'IDSTRING':([0,28,29,30,31,37,39,45,51,52,72,85,],[16,-27,-28,-29,-30,61,63,16,61,61,61,16,]),'INTTYPE':([0,28,29,30,31,37,40,45,51,52,72,85,],[17,-27,-28,-29,-30,54,64,17,54,54,54,17,]),'NINTTYPE':([0,28,29,30,31,37,41,45,51,52,72,85,],[18,-27,-28,-29,-30,56,65,18,56,56,56,18,]),'FLOATTYPE':([0,28,29,30,31,37,42,45,51,52,72,85,],[19,-27,-28,-29,-30,55,66,19,55,55,55,19,]),'LOOP':([0,45,85,],[21,21,21,]),'EXCLAM':([0,45,85,],[22,22,22,]),'TRUE':([0,22,28,29,30,31,32,33,37,43,44,45,51,52,72,85,],[23,23,-27,-28,-29,-30,-35,-36,58,23,23,23,58,58,58,23,]),'FALSE':([0,22,28,29,30,31,32,33,37,43,44,45,51,52,72,85,],[24,24,-27,-28,-29,-30,-35,-36,59,24,24,24,59,59,59,24,]),'$end':([1,2,3,4,5,6,7,8,9,23,24,46,48,49,62,63,64,65,66,67,68,76,81,82,83,86,92,95,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-37,-38,-33,-12,-34,-13,-14,-15,-16,-17,-18,-32,-39,-10,-11,-43,-9,-42,-31,]),'RLLAVE':([4,5,6,7,8,9,23,24,46,48,49,62,63,64,65,66,67,68,69,76,81,82,83,86,89,95,],[-3,-4,-5,-6,-7,-8,-37,-38,-33,-12,-34,-13,-14,-15,-16,-17,-18,-32,76,-39,-10,-11,-43,-9,92,-31,]),'MAYORQUE':([11,15,16,17,18,19,20,23,24,],[28,28,28,28,28,28,28,-37,-38,]),'MENORQUE':([11,15,16,17,18,19,20,23,24,],[29,29,29,29,29,29,29,-37,-38,]),'DIFERENTE':([11,15,16,17,18,19,20,23,24,],[30,30,30,30,30,30,30,-37,-38,]),'IDENTICO':([11,15,16,17,18,19,20,23,24,],[31,31,31,31,31,31,31,-37,-38,]),'DAMPERSAND':([11,20,23,24,],[32,32,-37,-38,]),'OR':([11,20,23,24,],[33,33,-37,-38,]),'MUT':([12,],[34,]),'LPAREN':([14,25,90,],[37,47,93,]),'LLLAVE':([21,78,],[45,85,]),'IGUAL':([35,36,50,],[51,52,72,]),'RPAREN':([53,54,55,56,57,58,59,60,61,71,84,91,93,],[75,-19,-20,-21,-22,-23,-24,-25,-26,78,-40,-41,94,]),'ENDCHAR':([54,55,56,57,58,59,60,61,73,74,75,79,94,],[-19,-20,-21,-22,-23,-24,-25,-26,81,82,83,86,95,]),'COLON':([70,],[77,]),'LINKEDLIST':([72,],[80,]),'INT16':([77,],[84,]),'DOSDOBLEPUNTOS':([80,],[87,]),'COMA':([84,],[88,]),'NEW':([87,],[90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cuerpo':([0,],[1,]),'metodo':([0,45,85,],[2,69,89,]),'funcion':([0,],[3,]),'asignacion':([0,45,85,],[4,4,4,]),'impresion':([0,45,85,],[5,5,5,]),'comparacion':([0,45,85,],[6,6,6,]),'linkedlist':([0,45,85,],[7,7,7,]),'loop':([0,45,85,],[8,8,8,]),'conectores':([0,45,85,],[9,9,9,]),'boolean':([0,22,43,44,45,85,],[20,46,67,68,20,20,]),'signocompar':([11,15,16,17,18,19,20,],[26,38,39,40,41,42,43,]),'signoconect':([11,20,],[27,44,]),'valor':([37,51,52,72,],[53,73,74,79,]),'params':([47,88,],[71,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> cuerpo","S'",1,None,None,None),
  ('cuerpo -> metodo','cuerpo',1,'p_cuerpo','sintaxisAB.py',5),
  ('cuerpo -> funcion','cuerpo',1,'p_cuerpo','sintaxisAB.py',6),
  ('metodo -> asignacion','metodo',1,'p_metodo','sintaxisAB.py',9),
  ('metodo -> impresion','metodo',1,'p_metodo','sintaxisAB.py',10),
  ('metodo -> comparacion','metodo',1,'p_metodo','sintaxisAB.py',11),
  ('metodo -> linkedlist','metodo',1,'p_metodo','sintaxisAB.py',12),
  ('metodo -> loop','metodo',1,'p_metodo','sintaxisAB.py',13),
  ('metodo -> conectores','metodo',1,'p_metodo','sintaxisAB.py',14),
  ('asignacion -> LET MUT ID IGUAL valor ENDCHAR','asignacion',6,'p_asignacion','sintaxisAB.py',18),
  ('asignacion -> LET ID IGUAL valor ENDCHAR','asignacion',5,'p_asignacion','sintaxisAB.py',19),
  ('asignacion -> CONST ID IGUAL valor ENDCHAR','asignacion',5,'p_asignacion','sintaxisAB.py',20),
  ('comparacion -> ID signocompar ID','comparacion',3,'p_comparacion_id','sintaxisAB.py',24),
  ('comparacion -> IDCHAR signocompar IDCHAR','comparacion',3,'p_comparacion_id','sintaxisAB.py',25),
  ('comparacion -> IDSTRING signocompar IDSTRING','comparacion',3,'p_comparacion_id','sintaxisAB.py',26),
  ('comparacion -> INTTYPE signocompar INTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',29),
  ('comparacion -> NINTTYPE signocompar NINTTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',30),
  ('comparacion -> FLOATTYPE signocompar FLOATTYPE','comparacion',3,'p_comparacion_int','sintaxisAB.py',31),
  ('comparacion -> boolean signocompar boolean','comparacion',3,'p_comparacion_bool','sintaxisAB.py',34),
  ('valor -> INTTYPE','valor',1,'p_valor','sintaxisAB.py',37),
  ('valor -> FLOATTYPE','valor',1,'p_valor','sintaxisAB.py',38),
  ('valor -> NINTTYPE','valor',1,'p_valor','sintaxisAB.py',39),
  ('valor -> ID','valor',1,'p_valor','sintaxisAB.py',40),
  ('valor -> TRUE','valor',1,'p_valor','sintaxisAB.py',41),
  ('valor -> FALSE','valor',1,'p_valor','sintaxisAB.py',42),
  ('valor -> IDCHAR','valor',1,'p_valor','sintaxisAB.py',43),
  ('valor -> IDSTRING','valor',1,'p_valor','sintaxisAB.py',44),
  ('signocompar -> MAYORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',47),
  ('signocompar -> MENORQUE','signocompar',1,'p_signocompar','sintaxisAB.py',48),
  ('signocompar -> DIFERENTE','signocompar',1,'p_signocompar','sintaxisAB.py',49),
  ('signocompar -> IDENTICO','signocompar',1,'p_signocompar','sintaxisAB.py',50),
  ('linkedlist -> LET MUT ID IGUAL LINKEDLIST DOSDOBLEPUNTOS NEW LPAREN RPAREN ENDCHAR','linkedlist',10,'p_linkedlist','sintaxisAB.py',54),
  ('conectores -> boolean signoconect boolean','conectores',3,'p_conectores','sintaxisAB.py',57),
  ('conectores -> EXCLAM boolean','conectores',2,'p_conectores','sintaxisAB.py',58),
  ('conectores -> ID signoconect ID','conectores',3,'p_conectores','sintaxisAB.py',59),
  ('signoconect -> DAMPERSAND','signoconect',1,'p_signoconect','sintaxisAB.py',62),
  ('signoconect -> OR','signoconect',1,'p_signoconect','sintaxisAB.py',63),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintaxisAB.py',67),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintaxisAB.py',68),
  ('loop -> LOOP LLLAVE metodo RLLAVE','loop',4,'p_loop','sintaxisAB.py',71),
  ('params -> ID COLON INT16','params',3,'p_params','sintaxisAB.py',74),
  ('params -> ID COLON INT16 COMA params','params',5,'p_params','sintaxisAB.py',75),
  ('funcion -> FN ID LPAREN params RPAREN LLLAVE metodo RLLAVE','funcion',8,'p_funcion','sintaxisAB.py',78),
  ('impresion -> PRINTLN LPAREN valor RPAREN ENDCHAR','impresion',5,'p_impresion','sintaxisAB.py',81),
]
