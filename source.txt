//Algoritmo ejemplo Alan Barco
let n = 5;
    if n < 0 {
        print!("{} is negative", n);
    } else if n > 0 {
        print!("{} is positive", n);
    } else {
        print!("{} is zero", n);
    }

    let big_n =
        if n < 10 && n > -10 {
            println!(", and is a small number, increase ten-fold");

            10 * n
        } else {
            println!(", and is a big number, halve the number");
            n / 2
        };

    println!("{} -> {}", n, big_n);


//Algoritmo ejemplo Jose Jaramillo

use std::io;

fn main() {

    let name:String= input("What is your name? ").expect("Something went wrong!!!");

    let age:i32 = input("What is your age? ")
        .expect("Failed to get age.")
        .parse::<i32>()
        .expect("Invalid age.");

    let current_year:i32 = 2022;
    let hundred_year:i32 = 100 - age + current_year;

    let repeat:i32 = input("How many times do you want to repeat the message? ")
        .expect("Failed to get repeat.")
        .parse::<i32>()
        .unwrap_or(1);

    let finalMsg: &'static str = "Goodbye!"; 

    for _ in 0..repeat {
        if age > 100 {
            println!(
                "Hey, {}! You turned 100 in the year: {}.",
                name, hundred_year
            );
        } else {
            println!(
                "Hey, {}! You'll turn 100 in the year: {}.",
                name, hundred_year
            );
        }
    }

    println!("{}",finalMsg);

}


fn input(user_message: &str) -> io::Result<String> {
    use std::io::Write;

    print!("{}", user_message);

    io::stdout().flush()?;

    let mut buffer: String = String::new();
    io::stdin().read_line(&mut buffer)?;

    Ok(buffer.trim_end().to_owned())
}


//Algoritmo ejemplo Pamela Rugel


use csv::{ReaderBuilder, StringRecord};
use std::collections::HashMap;
use std::fs;

const FILENAME: &str = "history.csv";
const FIRST_TAG: &str = "INICIO";

struct DatoHistoria {
    tipo_dato: String,
    tag: String,
    texto: String,
    vida: i32,
    opciones: Vec<DatoHistoria>,
}

impl DatoHistoria {
    fn new(row: StringRecord) -> DatoHistoria {
        let vida = row.get(3).unwrap().trim().trim();
        let vida: i32 = vida.parse().unwrap_or(0);
        return DatoHistoria {
            tipo_dato: row.get(0).unwrap().trim().to_string(),
            tag: row.get(1).unwrap().trim().to_string(),
            texto: row.get(2).unwrap().trim().to_string(),
            vida: vida,
            opciones: vec![],
        };
    }
}

fn main() {
    let mut vida = 100;
    let mut tag_actual = FIRST_TAG;
    let mut last_record: String = "".to_string();
    let mut datos_historia: HashMap<String, DatoHistoria> = HashMap::new();

    let content = fs::read_to_string(FILENAME).unwrap();
    let mut rdr = ReaderBuilder::new()
        .delimiter(b';')
        .from_reader(content.as_bytes());
    for result in rdr.records() {
        let result = result.unwrap();
        let dato = DatoHistoria::new(result);
        if dato.tipo_dato == "SITUACION" {
            let record_tag = dato.tag.clone();
            datos_historia.insert(record_tag.clone(), dato);
            last_record = record_tag;
        } else if dato.tipo_dato == "OPCION" {
            if let Some(data) = datos_historia.get_mut(&last_record) {
                (*data).opciones.push(dato);
            }
        }
    }
    // Game loop
    loop {
        println!("Tienes {} de vida", vida);
        if let Some(data) = datos_historia.get(tag_actual) {
            println!("{}", data.texto);
            for (indice, option) in data.opciones.iter().enumerate() {
                println!("[{}] {}", indice, option.texto);
            }
            let mut seleccion = String::new();
            std::io::stdin().read_line(&mut seleccion).unwrap();
            let seleccion = seleccion.trim().parse().unwrap_or(99);
            if let Some(opcion_elegida) = &data.opciones.get(seleccion) {
                tag_actual = &opcion_elegida.tag;
            } else {
                println!("Comando no valido")
            }
            vida += data.vida;
            println!("");
        } else {
            break;
        }
        // Si la vida es <= 0 entonces termina el juego
        if vida <= 0 {
            println!("Has perdido!");
            break;
        }
    }
}

/*
Comentario de varias lineas
aqui se comenta la primera
aqui la segunda
*/